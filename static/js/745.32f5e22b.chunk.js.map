{"version":3,"file":"static/js/745.32f5e22b.chunk.js","mappings":"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","sources":["components/pagination/index.jsx","components/panel/index.jsx","components/search/index.jsx","components/section/index.jsx","components/ui/title/index.jsx","containers/grid-view/components/grid-table.jsx","containers/grid-view/components/grid-table-body.jsx","modules/auth/pages/ErrorPage.jsx","containers/grid-view/components/grid-modal.jsx","modules/auth/pages/EmptyPage.jsx","containers/grid-view/grid-view.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {ceil, isEqual, range} from \"lodash\"\r\nimport classNames from \"classnames\";\r\nimport {ChevronLeft,ChevronRight} from \"react-feather\";\r\n\r\nconst Styled = styled.ul`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  li {\r\n    width: 40px;\r\n    height: 40px;\r\n    font-size: 16px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid #CCCCCC;\r\n    color: #A4A4A4;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    border-radius: 50%;\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    &:last-child{\r\n      margin-right: 0;\r\n    }\r\n\r\n    &.active {\r\n      background-color: #13D6D1;\r\n      border-color: #13D6D1;\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\nconst Pagination = ({\r\n                        totalItems = 0,\r\n                        limit = 20,\r\n                        page = 1,\r\n                        setPage = () => {\r\n                        },\r\n                        ...rest\r\n                    }) => {\r\n    const count = ceil(totalItems / limit)\r\n    return (\r\n        <Styled {...rest}>\r\n            {!!(page > 1) && <li onClick={()=>setPage(page-1)} className={'prev'}>\r\n                <ChevronLeft />\r\n            </li>}\r\n            {\r\n                count > 1 && range(1, count + 1).map(item => <li className={classNames({'active':isEqual(page,item)})} onClick={()=>setPage(item)} key={item}>\r\n                    {item}\r\n                </li>)\r\n            }\r\n            {!!(count > 1 && page < count) && <li onClick={()=>setPage(page+1)} className={'next'}>\r\n                <ChevronRight />\r\n            </li>}\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.div`\r\n  padding: 12px 15px;\r\n  background-color: #F7F7F7;\r\n  width: 100%;\r\n  display: block;\r\n`;\r\n\r\nconst Panel = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Panel;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.form`\r\n  display: flex;\r\n\r\n  .search-form-input {\r\n    padding: 15px 25px;\r\n    border: 1px solid #CDCDCD;\r\n    border-radius: 5px 0px 0px 5px;\r\n    display: block;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: 0.2s ease;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Regular', sans-serif;\r\n\r\n    &:focus {\r\n      border-color: #13D6D1;\r\n    }\r\n  }\r\n\r\n  .search-form-btn {\r\n    padding: 15px 20px;\r\n    min-width: 175px;\r\n    text-align: center;\r\n    border: none;\r\n    background: #13D6D1;\r\n    border-radius: 0px 5px 5px 0px;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Search = ({\r\n                    ...rest\r\n                }) => {\r\n    const {register, handleSubmit} = useForm();\r\n    const {t} = useTranslation()\r\n    const onSubmit = (data) => {\r\n        console.log('search', data)\r\n    }\r\n    return (\r\n        <Styled onSubmit={handleSubmit(onSubmit)} {...rest}>\r\n            <input placeholder={t('Поиск')}  {...register(\"search\")} type=\"text\" className={'search-form-input'}/>\r\n            <button className={'search-form-btn'} type={'submit'}>{t(\"Найти\")}</button>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.section`\r\n  padding: 25px 15px;\r\n  background-color: #fff;\r\n  \r\n`;\r\nconst Section = ({\r\n                     children,\r\n                     ...rest\r\n                 }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useEffect, useState,useRef} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h2{\r\n    padding-right: 25px;\r\n    font-size: 24px;\r\n    color: #000;\r\n    font-family: 'Gilroy-Bold', sans-serif;\r\n    margin-bottom: 0;\r\n  }\r\n  .line{\r\n    height: 1px;\r\n    background-color: #E5E5E5;\r\n    margin-top: 5px;\r\n    ${({w}) => w && `width: calc(100% - ${w}px - 10px);`}\r\n  }\r\n`;\r\nconst Title = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    const [width,setWidth] = useState(0);\r\n    useEffect(()=>{\r\n        setWidth(ref.current.clientWidth)\r\n    },[])\r\n    const ref = useRef(null)\r\n    return (\r\n        <Styled {...rest} w={width}>\r\n            <h2 ref={ref}>{children}</h2>\r\n            <div className=\"line\"></div>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {get} from \"lodash\"\r\nimport {ContentLoader} from \"../../../components/loader\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst Styled = styled.table`\r\n  width: 100%;\r\n  text-align: left;\r\n  margin-top: 15px;\r\n\r\n  tr {\r\n    vertical-align: middle;\r\n  }\r\n\r\n  .table-head {\r\n    th {\r\n      padding: 12px;\r\n      color: #010101;\r\n      font-family: 'Gilroy-Medium', sans-serif;\r\n      font-size: 16px;\r\n\r\n      &:first-child {\r\n        text-align: left;\r\n        padding-left: 20px;\r\n      }\r\n\r\n      text-align: center;\r\n\r\n      &:last-child {\r\n        text-align: right;\r\n        padding-right: 20px;\r\n        min-width: 125px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .table-body {\r\n    tr:nth-child(2n+1) {\r\n      background-color: #F4F4F4;\r\n    }\r\n\r\n    td {\r\n      padding: 12px;\r\n      font-family: 'Gilroy-Regular', sans-serif;\r\n      color: #000;\r\n\r\n      &:first-child {\r\n        text-align: left;\r\n        padding-left: 20px;\r\n      }\r\n\r\n      text-align: center;\r\n\r\n      &:last-child {\r\n        text-align: right;\r\n        padding-right: 20px;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GridTable = ({\r\n                       tableHeaderData = [],\r\n                       tableBodyData = [],\r\n                       TableBody,\r\n                       remove = () => {\r\n                       },\r\n                       openEditModal = () => {\r\n                       },\r\n                       isFetching = false,\r\n                       page,\r\n                       viewUrl = null,\r\n                       updateUrl = null,\r\n                       ...rest\r\n                   }) => {\r\n    const {t} = useTranslation()\r\n    return (\r\n        <Styled {...rest}>\r\n            {isFetching && <ContentLoader/>}\r\n            <thead className={'table-head'}>\r\n            <tr>\r\n                <th>№</th>\r\n                {\r\n                    tableHeaderData && tableHeaderData.map((th, i) => <th key={get(th, 'id', i)}>\r\n                        {\r\n                            t(get(th, 'title', '-'))\r\n                        }\r\n                    </th>)\r\n\r\n                }\r\n                <th>{t(\"Actions\")}</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody className={'table-body'}>\r\n            <TableBody viewUrl={viewUrl} updateUrl={updateUrl} page={page} remove={remove} openEditModal={openEditModal} tableHeaderData={tableHeaderData}\r\n                       tableBodyData={tableBodyData}/>\r\n            </tbody>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default GridTable;","import React from 'react';\r\nimport {get} from \"lodash\";\r\nimport {Trash2, Edit, Eye} from \"react-feather\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nconst GridTableBody = ({\r\n                           tableHeaderData = [],\r\n                           tableBodyData = [],\r\n                           remove = () => {\r\n                           },\r\n                           openEditModal = () => {\r\n                           },\r\n                           page,\r\n                           viewUrl = null,\r\n                           updateUrl = null\r\n                       }) => {\r\n    const navigate = useNavigate();\r\n    return (\r\n        <>\r\n            {\r\n                tableBodyData && tableBodyData.map((tr, i) => <tr key={get(tr, '_id', i)}>\r\n                    <td>{(page - 1) * 20 + (i + 1)}</td>\r\n                    {\r\n                        tableHeaderData && tableHeaderData.map((td, j) => <td key={get(td, 'id', j)}>\r\n                            {\r\n                                get(td, 'isArray') ? get(tr, `${get(td, 'key')}`, []).map(\r\n                                    item => get(item,get(td,'arrayKey','name'))\r\n                                ).join(\" , \") : get(td, 'hasNumberFormat',false) ? <NumberFormat displayType={'text'} thousandSeparator={\" \"} value={get(tr, `${get(td, 'key')}`, 0 )} /> : get(tr, `${get(td, 'key')}`, '-')\r\n                            }\r\n                        </td>)\r\n                    }\r\n                    <td>{viewUrl && <Eye onClick={() => navigate(`${viewUrl}/${get(tr, '_id', null)}`)}\r\n                                         className={'cursor-pointer mr-10'} size={20} color={'#78716c'}/>}<Edit\r\n                        onClick={() => {\r\n                            if (updateUrl) {\r\n                                navigate(`${updateUrl}/${get(tr, '_id', null)}`)\r\n                                return\r\n                            }\r\n                            openEditModal(get(tr, '_id', null))\r\n                        }} className={'cursor-pointer mr-10'} size={20}\r\n                        color={'#13D6D1'}/>\r\n                        <Trash2 onClick={() => remove(get(tr, '_id', null))}\r\n                                className={'cursor-pointer '} size={20} color={'#dc2626'}/></td>\r\n                </tr>)\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GridTableBody;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport forbiddenImg from \"../../../assets/images/empty.png\"\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst ErrorPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <img className={'img-fluid'} src={forbiddenImg}  alt=\"Error\"/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React,{useState,memo} from 'react';\r\nimport styled from 'styled-components';\r\nimport Rodal from 'rodal';\r\nimport Form from \"../../form/form\";\r\nimport Button from \"../../../components/ui/button\";\r\nimport {useGetOneQuery} from \"../../../hooks/api\";\r\nimport {get, isEqual} from \"lodash\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.div`\r\n  .rodal-dialog {\r\n    padding: 40px 30px !important;\r\n    height: auto !important;\r\n    overflow-y: auto;\r\n    left: 50% !important;\r\n    top: 50% !important;\r\n    transform: translate(-50%,-50%);\r\n    right: unset !important;\r\n    bottom: unset !important;\r\n    max-height: 60vh !important;\r\n  }\r\n`;\r\nconst GridModal = ({\r\n                       hide = () => {\r\n                       },\r\n                       visible = false,\r\n                       create = () => {\r\n                       },\r\n                       update = () => {\r\n                       },\r\n                       rowId = null,\r\n                       url = null,\r\n                       keyId = null,\r\n                       responseDataKey,\r\n                       ModalBody = null,\r\n                       ...rest\r\n                   }) => {\r\n    const {t} = useTranslation()\r\n    const [personType,setPersonType] = useState(null)\r\n    const setPersonTypeForSelect = (val,name) => {\r\n        if(isEqual(name,'typeofpersons')){\r\n            setPersonType(val)\r\n        }\r\n    }\r\n    const {data, isLoading} = useGetOneQuery({id: rowId, key: keyId, url, enabled: !!(rowId),showErrorMsg:false})\r\n    return (\r\n        <Styled {...rest}>\r\n            <Rodal visible={visible} onClose={hide}>\r\n                <Form getValueFromField={(val,name)=>setPersonTypeForSelect(val,name)} formRequest={rowId ? update : create} footer={<Button type={'submit'} className={'w-100'} >\r\n                    {\r\n                        rowId ? t('Edit') : t('Send')\r\n                    }\r\n                </Button>}>\r\n                    <ModalBody rowId={rowId} data={get(data,`data.${responseDataKey}`,{})} personType={personType} />\r\n                </Form>\r\n            </Rodal>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default memo(GridModal);","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport emptyImg from \"../../../assets/images/empty.png\"\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst ErrorPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <img className={'img-fluid'} src={emptyImg}  alt=\"Empty\"/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport GridTable from \"./components/grid-table\";\r\nimport GridTableBody from \"./components/grid-table-body\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Title from \"../../components/ui/title\";\r\nimport {get, includes, isEmpty, isEqual} from \"lodash\"\r\nimport {\r\n    useDeleteQuery,\r\n    usePaginateQuery,\r\n    usePostQuery,\r\n    usePutQuery\r\n} from \"../../hooks/api\";\r\nimport ErrorPage from \"../../modules/auth/pages/ErrorPage\";\r\nimport {OverlayLoader} from \"../../components/loader\";\r\nimport GridModal from \"./components/grid-modal\";\r\nimport Button from \"../../components/ui/button\";\r\nimport Panel from \"../../components/panel\"\r\nimport Search from \"../../components/search\";\r\nimport Section from \"../../components/section\";\r\nimport Swal from \"sweetalert2\";\r\nimport EmptyPage from \"../../modules/auth/pages/EmptyPage\";\r\nimport Pagination from \"../../components/pagination\";\r\nimport {useNavigate} from 'react-router-dom'\r\nimport Flex from \"../../components/flex\";\r\nimport Dropdown from \"../../components/dropdown\";\r\nimport {Check, ChevronUp, Menu} from \"react-feather\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\n\r\nconst Styled = styled.div`\r\n  .w-100 > div:first-child {\r\n    width: 100%;\r\n  }\r\n\r\n  .dropDown__button {\r\n    margin-top: 10px;\r\n    margin-left: 15px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .dropDown__body {\r\n    width: 200px !important;\r\n  }\r\n\r\n  .column__filter {\r\n    padding: 12px;\r\n\r\n    li {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 5px;\r\n      margin-bottom: 5px;\r\n      cursor: pointer;\r\n\r\n      &:first-child {\r\n        border-bottom: 1px solid #DCDCDC;\r\n        cursor: default;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GridView = ({\r\n                      TableBody = GridTableBody,\r\n                      ModalBody = () => <h2>Modal body</h2>,\r\n                      tableHeaderData = [],\r\n                      title = '',\r\n                      keyId,\r\n                      url,\r\n                      createUrl = null,\r\n                      updateUrl = null,\r\n                      viewUrl = null,\r\n                      responseDataKey = 'data',\r\n                      isHideColumn = false\r\n                  }) => {\r\n    const navigate = useNavigate()\r\n    const {t} = useTranslation()\r\n    const [openModal, setOpenModal] = useState(false)\r\n    const [rowId, setRowId] = useState(null)\r\n    const [page, setPage] = useState(1)\r\n    const [columns, setColumns] = useState([])\r\n    const {data, isError, isLoading, isFetching} = usePaginateQuery({key: keyId, url, page})\r\n    const {mutate: createRequest, isLoading: postLoading} = usePostQuery({listKeyId: keyId})\r\n    const {mutate: updateRequest, isLoading: putLoading} = usePutQuery({listKeyId: keyId})\r\n    const {mutate: deleteRequest, isLoading: deleteLoading} = useDeleteQuery({listKeyId: keyId})\r\n\r\n    useEffect(() => {\r\n        if (!isEmpty(tableHeaderData)) {\r\n            setColumns(tableHeaderData)\r\n        }\r\n    }, [tableHeaderData])\r\n\r\n    const create = ({data}) => {\r\n        createRequest({url, attributes: data}, {\r\n            onSuccess: () => {\r\n                setOpenModal(false)\r\n            },\r\n            onError: () => {\r\n                setOpenModal(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const update = ({data}) => {\r\n        if (rowId) {\r\n            updateRequest({url: `${url}/${rowId}`, attributes: data}, {\r\n                onSuccess: () => {\r\n                    setOpenModal(false)\r\n                },\r\n                onError: () => {\r\n                    setOpenModal(false)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const openEditModal = (id) => {\r\n        setOpenModal(true);\r\n        setRowId(id);\r\n    }\r\n\r\n    const remove = (id) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'error',\r\n            backdrop: 'rgba(0,0,0,0.9)',\r\n            background: 'none',\r\n            title: t('Are you sure?'),\r\n            showConfirmButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#d33',\r\n            cancelButtonColor: '#13D6D1',\r\n            confirmButtonText: t('Delete'),\r\n            cancelButtonText:t('Cancel'),\r\n            customClass: {\r\n                title: 'title-color',\r\n            },\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                deleteRequest({url: `${url}/${id}`})\r\n            }\r\n        });\r\n    }\r\n\r\n    const hideColumn = (key,has) => {\r\n        if(has) {\r\n            setColumns(columns => columns.filter(col => !isEqual(get(col, 'key'), key)))\r\n        }else{\r\n            setColumns(columns => [...columns,tableHeaderData.find(col => isEqual(get(col, 'key'), key))])\r\n        }\r\n    }\r\n\r\n    if (isLoading || putLoading || postLoading || deleteLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n    if (isError) {\r\n        return <ErrorPage/>\r\n    }\r\n    return (\r\n        <Styled>\r\n            <Panel>\r\n                <Row>\r\n                    <Col xs={10}>\r\n                        <Search/>\r\n                    </Col>\r\n                    <Col xs={2} className={'text-right'}>\r\n                        <Button lg onClick={() => {\r\n                            if (createUrl) {\r\n                                navigate(createUrl)\r\n                                return\r\n                            }\r\n                            setOpenModal(true);\r\n                            setRowId(null)\r\n                        }}>\r\n                            {t(\"Добавить\")}\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Panel>\r\n            <Section>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Flex className={'w-100'}>\r\n                            <Title>{title}</Title>\r\n                            {isHideColumn && <Dropdown button={<Menu/>}>\r\n                                <ul className=\"column__filter\">\r\n                                    <li><span>{t(\"Выбрать\")}</span><ChevronUp/></li>\r\n                                    {\r\n                                        tableHeaderData && tableHeaderData.map(column => <li onClick={()=>hideColumn(get(column, 'key'),includes(columns.map(({key})=>key),get(column, 'key')))} key={get(column, 'id')}>\r\n                                            <span>{t(get(column, 'title'))}</span>\r\n                                            {includes(columns.map(({key})=>key),get(column, 'key')) &&<Check size={18}/>}\r\n                                        </li>)\r\n                                    }\r\n\r\n                                </ul>\r\n                            </Dropdown>}\r\n                        </Flex>\r\n                    </Col>\r\n                    <Col xs={12}>\r\n                        <GridModal\r\n                            responseDataKey={responseDataKey}\r\n                            keyId={keyId}\r\n                            rowId={rowId}\r\n                            url={url}\r\n                            create={create}\r\n                            update={update}\r\n                            visible={openModal}\r\n                            hide={() => setOpenModal(false)}\r\n                            ModalBody={ModalBody}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n                {isEmpty(get(data, `data[${responseDataKey}]`, [])) ? <EmptyPage/> : <>\r\n                    <div className={'horizontal-scroll'}><GridTable\r\n                        viewUrl={viewUrl}\r\n                        updateUrl={updateUrl}\r\n                        page={page}\r\n                        TableBody={TableBody}\r\n                        tableHeaderData={columns}\r\n                        remove={remove}\r\n                        openEditModal={openEditModal}\r\n                        tableBodyData={get(data, `data[${responseDataKey}]`, [])}\r\n                        isFetching={isFetching}\r\n                    /></div>\r\n                    <Pagination page={page} setPage={setPage} totalItems={get(data, `data.totalItems`, 0)}/>\r\n                </>}\r\n            </Section>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default GridView;"],"names":["Styled","styled","totalItems","limit","page","setPage","rest","count","ceil","onClick","className","range","map","item","classNames","isEqual","children","fluid","useForm","register","handleSubmit","t","useTranslation","onSubmit","data","console","log","placeholder","type","w","useState","width","setWidth","useEffect","ref","current","clientWidth","useRef","tableHeaderData","tableBodyData","TableBody","remove","openEditModal","isFetching","viewUrl","updateUrl","th","i","get","navigate","useNavigate","tr","td","j","join","displayType","thousandSeparator","value","size","color","src","forbiddenImg","alt","GridModal","hide","visible","create","update","rowId","url","keyId","responseDataKey","ModalBody","personType","setPersonType","useGetOneQuery","id","key","enabled","showErrorMsg","isLoading","onClose","getValueFromField","val","name","setPersonTypeForSelect","formRequest","footer","memo","emptyImg","GridTableBody","title","createUrl","isHideColumn","openModal","setOpenModal","setRowId","columns","setColumns","usePaginateQuery","isError","usePostQuery","listKeyId","createRequest","mutate","postLoading","usePutQuery","updateRequest","putLoading","useDeleteQuery","deleteRequest","deleteLoading","isEmpty","xs","lg","button","column","has","includes","filter","col","find","attributes","onSuccess","onError","EmptyPage","Swal","position","icon","backdrop","background","showConfirmButton","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","customClass","then","result","isConfirmed"],"sourceRoot":""}