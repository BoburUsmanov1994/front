{"version":3,"file":"static/js/78.41b4355a.chunk.js","mappings":"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","sources":["modules/products/components/create/StepFive.jsx","modules/products/components/create/StepFour.jsx","modules/products/components/create/StepOne.jsx","modules/products/components/create/StepSix.jsx","modules/products/components/create/StepThree.jsx","modules/products/components/create/StepTwo.jsx","../node_modules/react-feather/dist/icons/download.js"],"sourcesContent":["import React from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport {useSettingsStore} from \"../../../../store\";\r\nimport {get, includes, isEqual} from \"lodash\"\r\nimport Title from \"../../../../components/ui/title\";\r\nimport Table from \"../../../../components/table\";\r\nimport {useGetAllQuery, usePostQuery, usePutQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {OverlayLoader} from \"../../../../components/loader\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport {Download} from \"react-feather\";\r\n\r\nconst StepFive = ({id = null, ...props}) => {\r\n\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n\r\n    const {mutate: createProduct, isLoading} = usePostQuery({listKeyId: KEYS.products})\r\n    const {mutate: updateProduct, isLoading: updateLoading} = usePutQuery({listKeyId: KEYS.products})\r\n\r\n    let {data: groups} = useGetAllQuery({key: KEYS.groupsofproducts, url: URLS.groupsofproducts})\r\n    groups = getSelectOptionsListFromData(get(groups, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: subGroups} = useGetAllQuery({key: KEYS.subgroupsofproducts, url: URLS.subgroupsofproducts})\r\n    subGroups = getSelectOptionsListFromData(get(subGroups, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: insurances} = useGetAllQuery({key: KEYS.typeofinsurer, url: URLS.typeofinsurer})\r\n    insurances = getSelectOptionsListFromData(get(insurances, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: status} = useGetAllQuery({key: KEYS.statusofproduct, url: URLS.statusofproduct})\r\n    status = getSelectOptionsListFromData(get(status, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: polices} = useGetAllQuery({key: KEYS.typeofpolice, url: URLS.typeofpolice})\r\n    polices = getSelectOptionsListFromData(get(polices, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: persons} = useGetAllQuery({key: KEYS.typeofpersons, url: URLS.typeofpersons})\r\n    persons = getSelectOptionsListFromData(get(persons, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: payments} = useGetAllQuery({key: KEYS.typeofpayment, url: URLS.typeofpayment})\r\n    payments = getSelectOptionsListFromData(get(payments, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: policyformats} = useGetAllQuery({key: KEYS.policyformats, url: URLS.policyformats})\r\n    policyformats = getSelectOptionsListFromData(get(policyformats, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: applicationformdocs} = useGetAllQuery({key: KEYS.applicationformdocs, url: URLS.applicationformdocs})\r\n    applicationformdocs = getSelectOptionsListFromData(get(applicationformdocs, `data.data`, []), '_id', 'url')\r\n\r\n    let {data: contractform} = useGetAllQuery({key: KEYS.contractform, url: URLS.contractform})\r\n    contractform = getSelectOptionsListFromData(get(contractform, `data.data`, []), '_id', 'url')\r\n\r\n    let {data: additionaldocuments} = useGetAllQuery({key: KEYS.additionaldocuments, url: URLS.additionaldocuments})\r\n    additionaldocuments = getSelectOptionsListFromData(get(additionaldocuments, `data.data`, []), '_id', 'url')\r\n\r\n\r\n    const findItem = (items = [], id, multiple = false) => {\r\n        if (!multiple) {\r\n            return items.find(item => isEqual(get(item, 'value'), id)) || {}\r\n        } else {\r\n            return items.filter(item => includes(id, get(item, 'value'))).map(({label}) => label).join(\" , \") || \"-\"\r\n        }\r\n    }\r\n\r\n    const nextStep = () => {\r\n        if (id) {\r\n            updateProduct({url: `${URLS.products}/${id}`, attributes: product}, {\r\n                onSuccess: () => {\r\n                    resetRiskList();\r\n                    resetProduct();\r\n                    props.nextStep();\r\n                },\r\n                onError: () => {\r\n\r\n                }\r\n            })\r\n        } else {\r\n            createProduct({url: URLS.products, attributes: product}, {\r\n                onSuccess: () => {\r\n                    resetRiskList();\r\n                    resetProduct();\r\n                    props.nextStep();\r\n                },\r\n                onError: () => {\r\n\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const prevStep = () => {\r\n        props.previousStep();\r\n    }\r\n\r\n    const reset = () => {\r\n        resetRiskList();\r\n        resetProduct();\r\n        props.firstStep();\r\n    }\r\n\r\n    return (<>\r\n            {(isLoading || updateLoading) && <OverlayLoader/>}\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <StepNav step={5}/>\r\n                </Col>\r\n                <Col xs={12}>\r\n                    <Form formRequest={nextStep}>\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Title>Проверьте данные </Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className={'mb-25'}>\r\n                            <Col xs={6}>\r\n                                <Table thead={['1', '2']}>\r\n                                    <tr>\r\n                                        <td>Категория</td>\r\n                                        <td>\r\n                                            <strong>{get(findItem(groups, get(product, 'groupofproductsId', null)), 'label', '-')}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Под категория</td>\r\n                                        <td>\r\n                                            <strong>{get(findItem(subGroups, get(product, 'subgroupofproductsId', null)), 'label', '-')}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Код назначения</td>\r\n                                        <td><strong>{get(product, 'codeproduct', '-')}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Работа по версии продукта (Версия продукта)</td>\r\n                                        <td><strong>{get(product, 'versionproduct', '-')}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Тип страховщика</td>\r\n                                        <td>\r\n                                            <strong>{findItem(persons, get(product, 'typeofpersones', []), true)}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Наименование продукта</td>\r\n                                        <td><strong>{get(product, 'productname', '-')}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Статус договора</td>\r\n                                        <td>\r\n                                            <strong>{get(findItem(status, get(product, 'statusofproducts', null)), 'label', '-')}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Требует разрешения</td>\r\n                                        <td><strong>{get(product, 'isrequirepermission', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Тип полиса</td>\r\n                                        <td>\r\n                                            <strong>{findItem(polices, get(product, 'typeofpolice', null), true)}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Разрешить несколько агентов</td>\r\n                                        <td><strong>{get(product, 'Isagreement', false) ? 'Да' : 'Нет'}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет фиксированный превентивных мероприятий</td>\r\n                                        <td>\r\n                                            <strong>{get(product, 'Isfixedpreventivemeasures', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Разрешить иностранную валюту</td>\r\n                                        <td><strong>{get(product, 'Isforeigncurrency', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Разрешение изменение франшизы</td>\r\n                                        <td><strong>{get(product, 'Isfranchisechange', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Table>\r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <Table thead={['1', '2']}>\r\n                                    <tr>\r\n                                        <td>Форма анкеты</td>\r\n\r\n                                        <td><a\r\n                                            href={get(findItem(applicationformdocs, get(product, 'applicationformId', null)), 'url', '#')}\r\n                                            target={'_blank'} download><Download color={'#13D6D1'}/></a></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Договор</td>\r\n                                        <td><a\r\n                                            href={get(findItem(contractform, get(product, 'contractform', null)), 'url', '#')}\r\n                                            target={'_blank'} download><Download color={'#13D6D1'}/></a></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Приложения</td>\r\n                                        <td><a\r\n                                            href={get(findItem(additionaldocuments, get(product, 'additionaldocuments', null)), 'url', '#')}\r\n                                            target={'_blank'} download><Download color={'#13D6D1'}/></a></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Формат полиса</td>\r\n                                        <td>\r\n                                            <strong>{get(findItem(policyformats, get(product, 'policyformatId', null)), 'label', '-')}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет фиксированного страхователя</td>\r\n                                        <td><strong>{get(product, 'Isfixedpolicyholder', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет выгодоприобретеля</td>\r\n                                        <td><strong>{get(product, 'Isbeneficiary', false) ? 'Да' : 'Нет'}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет фиксированного выгодоприобретеля</td>\r\n                                        <td><strong>{get(product, 'Isfixedbeneficiary', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет фиксированную страховую сумму</td>\r\n                                        <td><strong>{get(product, 'Isfixedfee', false) ? 'Да' : 'Нет'}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Разрешить полис без оплаты</td>\r\n                                        <td>\r\n                                            <strong>{get(product, 'Ispolicywithoutpayment', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Тип оплаты</td>\r\n                                        <td>\r\n                                            <strong>{findItem(payments, get(product, 'typeofpayment', null), true)}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет фиксированную комиссию</td>\r\n                                        <td><strong>{get(product, 'Isfixedfee', false) ? 'Да' : 'Нет'}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет диапазон ставок</td>\r\n                                        <td><strong>{get(product, 'Isbettingrange', false) ? 'Да' : 'Нет'}</strong></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Имеет франшизу</td>\r\n                                        <td><strong>{get(product, 'Isfranchisechange', false) ? 'Да' : 'Нет'}</strong>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs={12} className={'mt-32'}>\r\n                                <Button className={'mr-16'} type={'button'} onClick={reset} danger outlined\r\n                                        back>Отменить</Button>\r\n                                <Button dark className={'mr-16'} type={'button'} onClick={prevStep}\r\n                                        outlined>Назад</Button>\r\n                                <Button type={'submit'} success>Подтвердить</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StepFive;","import React, {useState, useMemo, useCallback} from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport {useSettingsStore} from \"../../../../store\";\r\nimport {every, get, includes, isEmpty, isEqual, isNil, setWith, some} from \"lodash\"\r\nimport Title from \"../../../../components/ui/title\";\r\nimport {useGetAllQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport Table from \"../../../../components/table\";\r\nimport Flex from \"../../../../components/flex\";\r\nimport {Trash2} from \"react-feather\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst StepFour = ({id = null, ...props}) => {\r\n    const [fields, setFields] = useState({riskOptions: []})\r\n    const [tarif, setTarif] = useState({\r\n        agentlist: null,\r\n        limitofagreement: 0,\r\n        Isagreement: false,\r\n        tariffperclasses: []\r\n    })\r\n    const [tariffList, setTariffList] = useState([])\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n\r\n    const nextStep = ({data}) => {\r\n        let {riskOptions, agentlist, Isagreement, limitofagreement, tariffperclasses, ...rest} = data;\r\n        setProduct({...rest});\r\n        props.nextStep();\r\n    }\r\n\r\n    const prevStep = () => {\r\n        props.previousStep();\r\n    }\r\n\r\n    const reset = () => {\r\n        resetProduct();\r\n        resetRiskList();\r\n        props.firstStep();\r\n    }\r\n\r\n    let {data: agents} = useGetAllQuery({key: KEYS.agents, url: URLS.agents})\r\n    agents = getSelectOptionsListFromData(get(agents, `data.data`, []), '_id', 'inn')\r\n\r\n    let {data: classes} = useGetAllQuery({key: KEYS.classes, url: URLS.classes})\r\n    const classOptions = getSelectOptionsListFromData(get(classes, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: risks} = useGetAllQuery({key: KEYS.risk, url: URLS.risk})\r\n    let risksOptions = getSelectOptionsListFromData(get(risks, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: franchises} = useGetAllQuery({key: KEYS.typeoffranchise, url: URLS.typeoffranchise})\r\n    franchises = getSelectOptionsListFromData(get(franchises, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: baseFranchises} = useGetAllQuery({key: KEYS.baseoffranchise, url: URLS.baseoffranchise})\r\n    baseFranchises = getSelectOptionsListFromData(get(baseFranchises, `data.data`, []), '_id', 'name')\r\n\r\n\r\n    const setFieldValue = (value, name = \"\") => {\r\n\r\n        if (includes('riskOptions', name) || includes(name, 'franchise')) {\r\n            setFields(prev => ({...prev, [name]: value}));\r\n        }\r\n\r\n        if (includes(['agentlist', 'Isagreement', 'limitofagreement'], name)) {\r\n            setTarif(prev => ({...prev, [name]: value}))\r\n        }\r\n\r\n        if (includes(name, 'tariffperclasses')) {\r\n            setTarif(({...setWith(tarif, name, value)}))\r\n        }\r\n    }\r\n\r\n\r\n    const findItem = (list = [], id = null) => {\r\n        return list.find(l => isEqual(get(l, \"_id\"), id))\r\n    }\r\n\r\n\r\n    const addTariff = () => {\r\n        let result = [];\r\n        let {tariff, ...rest} = tarif;\r\n        if (!isNil(get(tarif, \"agentlist\"))) {\r\n            const res = tariffList.filter(t => !isEqual(get(t, \"agentlist\"), get(rest, \"agentlist\")));\r\n            result = [...res, rest]\r\n            setTariffList(result)\r\n            setTarif({\r\n                ...tarif,\r\n                tariffperclasses: get(tarif, 'tariffperclasses', []).map(({classes, min, max}) => ({\r\n                    classes,\r\n                    min: 0,\r\n                    max: 0\r\n                }))\r\n            })\r\n        } else {\r\n            toast.warn(\"Select all fields\")\r\n        }\r\n\r\n    }\r\n\r\n    const removeTariffFromList = (i) => {\r\n        setTariffList(prev => prev.filter((f, j) => !isEqual(i, j)))\r\n    }\r\n\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <StepNav step={4}/>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <Form formRequest={nextStep} getValueFromField={setFieldValue}>\r\n                    <Row className={'mb-15'}>\r\n                        <Col xs={12}>\r\n                            <Title>Тарифы</Title>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={12}>\r\n                            <Row align={'flex-end'}>\r\n                                <Col xs={3}>\r\n                                    <Field label={'Агенты'}\r\n                                           type={'select'}\r\n                                           name={'agentlist'}\r\n                                           options={agents}\r\n                                           defaultValue={get(product, 'agentlist')}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={3}>\r\n                                    <Field label={'Разрешить заключение договоров'}\r\n                                           type={'switch'}\r\n                                           name={'Isagreement'}\r\n                                           defaultValue={get(product, 'Isagreement', false)}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={3}>\r\n                                    <Field label={'Лимит ответственности'}\r\n                                           type={'number-format-input'}\r\n                                           name={'limitofagreement'}\r\n                                           defaultValue={get(product, 'limitofagreement', 0)}\r\n                                           property={{placeholder: 'Введите значение'}}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={3} className={'text-right'}>\r\n                                    <Button onClick={addTariff} type={'button'} className={'mb-25'}>Применить</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {get(product, 'riskId', []).length > 0 && <Col xs={12} className={'mb-25'}>\r\n                            <hr/>\r\n                            <Table hideThead={false}\r\n                                   thead={['Класс', 'минимальную и  ставку по классу ', 'максимальную ставку по классу',]}>\r\n                                {get(product, 'riskId', []).map((item, i) => <tr key={i + 1}>\r\n                                    <td>\r\n                                        <Field\r\n                                            name={`tariffperclasses[${i}].classes`}\r\n                                            type={'select'}\r\n                                            property={{\r\n                                                hideLabel: true,\r\n                                                bgColor: get(findItem(get(classes, 'data.data'), get(item, \"_id\")), 'color')\r\n                                            }}\r\n                                            options={classOptions}\r\n                                            defaultValue={get(findItem(get(classes, 'data.data'), get(item, \"classeId\")), '_id')}\r\n                                            isDisabled={true}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                name={`tariffperclasses[${i}].min`}\r\n                                                type={'number-format-input'}\r\n                                                property={{hideLabel: true, placeholder: 'Мин', suffix: ' %'}}\r\n                                                defaultValue={get(product, `tariffperclasses[${i}].min`, 0)}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Flex justify={'flex-end'}>\r\n                                            <Field\r\n                                                name={`tariffperclasses[${i}].max`}\r\n                                                type={'number-format-input'}\r\n                                                property={{hideLabel: true, placeholder: 'Макс', suffix: ' %'}}\r\n                                                defaultValue={get(product, `tariffperclasses[${i}].max`, 0)}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                </tr>)}\r\n                            </Table>\r\n                        </Col>}\r\n                        {tariffList.length > 0 && <Col xs={12} className={'horizontal-scroll'}>\r\n                            <hr/>\r\n                            <Table hideThead={false}\r\n                                   thead={['Агент', 'Class', 'Разрешить заключение договоров', 'Лимит ответственности', 'Max', 'Min', 'Delete']}>\r\n                                {tariffList.map((item, i) => <tr key={i + 1}>\r\n                                    <td>\r\n                                        <Field options={agents} type={'select'} name={`tariff[${i}].agentlist`}\r\n                                               defaultValue={get(item, 'agentlist')} property={{hideLabel: true}}\r\n                                               isDisabled={true}/>\r\n                                    </td>\r\n                                    <td>\r\n                                        {\r\n                                            get(item, 'tariffperclasses', []).map((c, j) => <Field key={j}\r\n                                                                                                   className={'mb-15'}\r\n                                                                                                   name={`tariff[${i}].tariffperclasses[${j}].classes`}\r\n                                                                                                   type={'select'}\r\n                                                                                                   property={{\r\n                                                                                                       hideLabel: true,\r\n                                                                                                       bgColor: get(findItem(get(classes, 'data.data'), get(c, \"_id\")), 'color')\r\n                                                                                                   }}\r\n                                                                                                   options={classOptions}\r\n                                                                                                   defaultValue={get(findItem(get(classes, 'data.data'), get(c, \"classes\")), '_id')}\r\n                                                                                                   isDisabled={true}\r\n                                            />)\r\n\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                        <Field property={{hideLabel: true}}\r\n                                               type={'switch'}\r\n                                               name={`tariff[${i}].Isagreement`}\r\n                                               defaultValue={get(item, 'Isagreement', false)}\r\n                                               disabled={true}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Field\r\n                                            type={'number-format-input'}\r\n                                            name={`tariff[${i}].limitofagreement`}\r\n                                            defaultValue={get(item, 'limitofagreement', 0)}\r\n                                            property={{\r\n                                                disabled: true,\r\n                                                placeholder: 'Введите значение',\r\n                                                hideLabel: true\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        {get(item, `tariffperclasses`, []).map((c, j) => <Field key={j}\r\n                                                                                                className={'mb-15'}\r\n                                                                                                type={'number-format-input'}\r\n                                                                                                name={`tariff[${i}].tariffperclasses[${j}].max`}\r\n                                                                                                defaultValue={get(c, 'max', 0)}\r\n                                                                                                property={{\r\n                                                                                                    disabled: true,\r\n                                                                                                    placeholder: 'Введите значение',\r\n                                                                                                    hideLabel: true\r\n                                                                                                }}\r\n                                        />)}\r\n\r\n                                    </td>\r\n                                    <td>\r\n                                        {get(item, `tariffperclasses`, []).map((c, j) => <Field key={j}\r\n                                                                                                className={'mb-15'}\r\n                                                                                                type={'number-format-input'}\r\n                                                                                                name={`tariff[${i}].tariffperclasses[${j}].min`}\r\n                                                                                                defaultValue={get(c, 'min', 0)}\r\n                                                                                                property={{\r\n                                                                                                    disabled: true,\r\n                                                                                                    placeholder: 'Введите значение',\r\n                                                                                                    hideLabel: true\r\n                                                                                                }}\r\n                                        />)}\r\n\r\n                                    </td>\r\n                                    <td className={'cursor-pointer'}\r\n                                        onClick={() => removeTariffFromList(i)}><Trash2\r\n                                        color={'#dc2626'}/></td>\r\n                                </tr>)}\r\n                            </Table>\r\n                        </Col>}\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={12}><Title>Франшиза</Title></Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        {get(product, 'riskId', []).length > 0 && <Col xs={12} className={'horizontal-scroll'}>\r\n                            <hr/>\r\n                            <Table hideThead={false}\r\n                                   thead={['Страховой риск', 'Имеет франшизу', 'Строго фиксирована', 'Введите фиксированное значение', 'Укажите тип франшизы', 'Укажите базу франшизы', 'Франшиза']}>\r\n                                {get(product, 'riskId', []).map((item, i) => <tr key={i + 1}>\r\n                                    <td>\r\n                                        <Field\r\n                                            className={'w-250'}\r\n                                            name={`franchise[${i}].risk`}\r\n                                            type={'select'}\r\n                                            property={{hideLabel: true}}\r\n                                            options={risksOptions}\r\n                                            defaultValue={get(findItem(get(risks, 'data.data'), get(item, 'risk')), '_id')}\r\n                                            isDisabled={true}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                type={'switch'}\r\n                                                name={`franchise[${i}].Isfranchise`}\r\n                                                defaultValue={get(product, `franchise[${i}].Isfranchise`, false)}\r\n                                                property={{hideLabel: true}}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                type={'switch'}\r\n                                                name={`franchise[${i}].Isfixedfranchise`}\r\n                                                defaultValue={get(product, `franchise[${i}].Isfixedfranchise`, false)}\r\n                                                property={{hideLabel: true}}\r\n                                                disabled={!!!(get(fields, `franchise[${i}].Isfranchise`))}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                name={`franchise[${i}].fixedvalue`}\r\n                                                type={'number-format-input'}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    placeholder: 'ввод значения',\r\n                                                    disabled: !!!(get(fields, `franchise[${i}].Isfixedfranchise`))\r\n                                                }}\r\n                                                defaultValue={get(product, `franchise[${i}].fixedvalue`, 0)}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                    <td className={'w-250'}>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                className={'w-250'}\r\n                                                name={`franchise[${i}].typeoffranchise`}\r\n                                                type={'select'}\r\n                                                property={{hideLabel: true}}\r\n                                                options={franchises}\r\n                                                isDisabled={!!!(get(fields, `franchise[${i}].Isfranchise`))}\r\n                                                defaultValue={get(product, `franchise[${i}].typeoffranchise`)}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                    <td className={'w-250'}>\r\n                                        <Flex justify={'center'}>\r\n                                            <Field\r\n                                                className={'w-250'}\r\n                                                name={`franchise[${i}].baseoffranchise`}\r\n                                                type={'select'}\r\n                                                property={{hideLabel: true}}\r\n                                                options={baseFranchises}\r\n                                                isDisabled={!!!(get(fields, `franchise[${i}].Isfranchise`))}\r\n                                                defaultValue={get(product, `franchise[${i}].baseoffranchise`)}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <Flex justify={'flex-end'}>\r\n                                            <Field\r\n\r\n                                                name={`franchise[${i}].franchise`}\r\n                                                type={'input'}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    placeholder: 'Введите значение',\r\n                                                    disabled: !(get(fields, `franchise[${i}].Isfranchise`) && !get(fields, `franchise[${i}].Isfixedfranchise`))\r\n                                                }}\r\n                                                defaultValue={get(product, `franchise[${i}].franchise`, '')}\r\n                                            />\r\n                                        </Flex>\r\n                                    </td>\r\n                                </tr>)}\r\n                            </Table>\r\n                        </Col>}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} className={'mt-32'}>\r\n                            <Button className={'mr-16'} type={'button'} onClick={reset} danger outlined\r\n                                    back>Отменить</Button>\r\n                            <Button dark className={'mr-16'} type={'button'} onClick={prevStep}\r\n                                    outlined>Назад</Button>\r\n                            <Button type={'submit'} success>Продолжить</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default StepFour;","import React, {useState, memo, useEffect} from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport {useSettingsStore} from \"../../../../store\";\r\nimport {get, includes, some, values, isEmpty, isEqual, head} from \"lodash\"\r\nimport {useGetAllQuery, useGetOneQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport Title from \"../../../../components/ui/title\";\r\nimport {toast} from \"react-toastify\";\r\nimport Table from \"../../../../components/table\";\r\nimport {Trash2} from \"react-feather\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst StepOne = ({id = null, ...props}) => {\r\n    const {t} = useTranslation()\r\n\r\n    const [riskItem, setRiskItem] = useState({});\r\n    const [productGroupId, setProductGroupId] = useState(null);\r\n    const [riskTypeId, setRiskTypeId] = useState(null);\r\n\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const addRiskList = useSettingsStore(state => get(state, 'addRiskList', () => {\r\n    }))\r\n    const removeRiskList = useSettingsStore(state => get(state, 'removeRiskList', () => {\r\n    }))\r\n    const riskList = useSettingsStore(state => get(state, 'riskList', []))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n    let {data: bcoTypes} = useGetAllQuery({key: KEYS.typeofbco, url: URLS.typeofbco})\r\n    bcoTypes = getSelectOptionsListFromData(get(bcoTypes, `data.data`, []), '_id', 'policy_type_name')\r\n\r\n    useEffect(() => {\r\n        if (id && isEmpty(riskItem) && !isEmpty(get(product, 'riskId', []))) {\r\n            addRiskList(...get(product, 'riskId', []).map(({classeId, risk, riskgroup}) => ({\r\n                risk: get(risk, '_id'),\r\n                riskgroup: get(riskgroup, '_id'),\r\n                classeId: get(classeId, '_id')\r\n            })))\r\n        }\r\n    }, [product])\r\n\r\n    const nextStep = ({data}) => {\r\n        const {classeId, risk, riskgroup, ...rest} = data\r\n        setProduct(rest);\r\n        props.nextStep();\r\n    }\r\n\r\n    const prevStep = () => {\r\n        props.previousStep();\r\n    }\r\n\r\n    const reset = () => {\r\n        resetProduct();\r\n        resetRiskList();\r\n        props.firstStep();\r\n    }\r\n\r\n    let {data: groups} = useGetAllQuery({key: KEYS.groupsofproducts, url: URLS.groupsofproducts})\r\n    groups = getSelectOptionsListFromData(get(groups, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: subGroups} = useGetOneQuery({\r\n        id: productGroupId,\r\n        key: KEYS.subgroupsofproductsFilter,\r\n        url: URLS.subgroupsofproductsFilter,\r\n        enabled: !!productGroupId\r\n    })\r\n    subGroups = getSelectOptionsListFromData(get(subGroups, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: insurances} = useGetAllQuery({key: KEYS.typeofinsurer, url: URLS.typeofinsurer})\r\n    insurances = getSelectOptionsListFromData(get(insurances, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: sectors} = useGetAllQuery({key: KEYS.typeofsector, url: URLS.typeofsector})\r\n    sectors = getSelectOptionsListFromData(get(sectors, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: persons} = useGetAllQuery({key: KEYS.typeofpersons, url: URLS.typeofpersons})\r\n    persons = getSelectOptionsListFromData(get(persons, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: status} = useGetAllQuery({key: KEYS.statusofproduct, url: URLS.statusofproduct})\r\n    status = getSelectOptionsListFromData(get(status, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: riskGroups} = useGetAllQuery({key: KEYS.typeofrisk, url: URLS.typeofrisk})\r\n    riskGroups = getSelectOptionsListFromData(get(riskGroups, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: risksList} = useGetAllQuery({key: KEYS.risk, url: URLS.risk})\r\n    risksList = getSelectOptionsListFromData(get(risksList, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: risksData} = useGetOneQuery({\r\n        id: riskTypeId,\r\n        key: KEYS.riskFilter,\r\n        url: URLS.riskFilter,\r\n        enabled: !!riskTypeId\r\n    })\r\n    let risks = getSelectOptionsListFromData(get(risksData, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: insuranceClassesList} = useGetAllQuery({key: KEYS.classes, url: URLS.classes})\r\n    let insuranceClasses = getSelectOptionsListFromData(get(insuranceClassesList, `data.data`, []), '_id', 'name')\r\n\r\n    const setRisk = (value, name) => {\r\n        if (includes(['riskgroup', 'classeId', 'risk'], name)) {\r\n            setRiskItem(prev => ({...prev, [name]: value}))\r\n        }\r\n        if (isEqual(name, 'groupofproductsId')) {\r\n            setProductGroupId(value)\r\n        }\r\n        if (isEqual(name, 'riskgroup')) {\r\n            setRiskTypeId(value)\r\n        }\r\n    }\r\n\r\n    const addRiskItem = () => {\r\n        if (some(values(riskItem), val => isEmpty(val))) {\r\n            toast.warn('You have to select all fields')\r\n        } else {\r\n            addRiskList({...riskItem, id: riskList.length + 1})\r\n        }\r\n        setRiskItem({riskgroup: '', classeId: '', risk: ''})\r\n    }\r\n\r\n\r\n    const findItem = (list = [], id = null) => {\r\n        return list.find(l => isEqual(get(l, \"_id\"), id))\r\n    }\r\n\r\n    console.log('riskList',riskList)\r\n    console.log('risksList',risksList)\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <StepNav step={1}/>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <Form formRequest={nextStep} getValueFromField={setRisk}>\r\n                    <Row>\r\n                        <Col xs={3}>\r\n                            <Field label={t('Выберите категорию')} options={groups} type={'select'}\r\n                                   name={'groupofproductsId'} params={{required: true}}\r\n                                   property={{hasRequiredLabel: true}}\r\n                                   defaultValue={get(product, 'groupofproductsId')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field label={t('Выберите подкатегорию ')} options={subGroups} type={'select'}\r\n                                   name={'subgroupofproductsId'} params={{required: true}}\r\n                                   property={{hasRequiredLabel: true}}\r\n                                   defaultValue={get(product, 'subgroupofproductsId')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field label={t('Наименование продукта')} type={'input'} name={'productname'}\r\n                                   params={{required: true}}\r\n                                   property={{hasRequiredLabel: true, placeholder: t('Введите значение')}}\r\n                                   defaultValue={get(product, 'productname')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field label={t('Код назначения')}\r\n                                   type={'input'}\r\n                                   name={'codeproduct'}\r\n                                   property={{placeholder: t('Введите значение')}}\r\n                                   defaultValue={get(product, 'codeproduct', '')}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={3}>\r\n                            <Field\r\n                                label={t('Работа по версии продукта (Версия продукта)')}\r\n                                type={'input'}\r\n                                name={'versionproduct'}\r\n                                property={{placeholder: t('Введите значение')}}\r\n                                defaultValue={get(product, 'versionproduct', '')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field\r\n                                options={insurances}\r\n                                label={t('Форма страхования')}\r\n                                type={'select'}\r\n                                name={'typeofinsurerId'}\r\n                                defaultValue={get(product, 'typeofinsurerId')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field\r\n                                options={sectors}\r\n                                label={t('Указать сектор')}\r\n                                type={'select'}\r\n                                name={'typeofsectorId'}\r\n                                defaultValue={get(product, 'typeofsectorId')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field\r\n                                options={bcoTypes}\r\n                                label={t('Bco type')}\r\n                                type={'select'}\r\n                                name={'typeofbco'}\r\n                                defaultValue={get(product, 'typeofbco')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field\r\n                                label={t('Требуется разрешение')}\r\n                                type={'switch'}\r\n                                name={'isrequirepermission'}\r\n                                defaultValue={get(product, 'isrequirepermission', false)}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={9}>\r\n                            <Field\r\n                                options={persons}\r\n                                label={t('Выбрать тип страховщика')}\r\n                                type={'checkbox'}\r\n                                name={'typeofpersones'}\r\n                                defaultValue={get(product, 'typeofpersones', [])}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={3}>\r\n                            <Field options={status}\r\n                                   label={t('Статус продукта')}\r\n                                   type={'switch'}\r\n                                   name={'statusofproducts'} defaultValue={get(product, 'statusofproducts', false)}\r\n                                   params={{required: true}}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} className={'mb-15'}>\r\n                            <Title>{t(\"Добавить риски\")}</Title>\r\n                        </Col>\r\n                        <Col xs={12} className={'mb-15'}>\r\n                            <Row>\r\n                                <Col xs={10}>\r\n                                    <Row align={'center'}>\r\n                                        <Col xs={4}>\r\n                                            <Field\r\n                                                options={riskGroups}\r\n                                                type={'select'}\r\n                                                name={'riskgroup'}\r\n                                                defaultValue={get(riskItem, 'riskgroup')}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    placeholder: t('Выберите группу  риска')\r\n                                                }}/>\r\n                                        </Col>\r\n                                        <Col xs={4}>\r\n                                            <Field\r\n                                                options={risks}\r\n                                                type={'select'}\r\n                                                name={'risk'}\r\n                                                defaultValue={get(riskItem, 'risk')}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    placeholder: t('Выберите риск')\r\n                                                }}/>\r\n                                        </Col>\r\n                                        <Col xs={4}>\r\n                                            <Field\r\n                                                options={insuranceClasses.filter(classItem => includes(get(findItem(\r\n                                                    get(risksData, 'data.data', []), get(riskItem, 'risk')\r\n                                                ), 'classesId', []), get(classItem, 'value')))}\r\n                                                type={'select'}\r\n                                                name={'classeId'}\r\n                                                defaultValue={get(head(insuranceClasses.filter(classItem => includes(get(findItem(\r\n                                                    get(risksData, 'data.data', []), get(riskItem, 'risk')\r\n                                                ), 'classesId', []), get(classItem, 'value')))), 'value')}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    placeholder: t('Класс страхования')\r\n                                                }}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs={2} className={'text-right'}>\r\n                                    <Button onClick={addRiskItem} type={'button'}>{t(\"Добавить\")}</Button>\r\n                                </Col>\r\n                                {riskList.length > 0 && <Col xs={12}>\r\n                                    <hr/>\r\n                                    <Table hideThead={false}\r\n                                           thead={[t('Тип риска'), t('Риск'), t('Класс страхования'), t('Delete')]}>\r\n                                        {riskList.map((item, i) => <tr key={i + 1}>\r\n                                            <td>\r\n                                                <Field\r\n                                                    type={'select'}\r\n                                                    options={riskGroups} name={`riskId[${i}.riskgroup`}\r\n                                                    isDisabled={true}\r\n                                                    defaultValue={get(item, 'riskgroup')}\r\n                                                    property={{hideLabel: true}}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Field\r\n                                                    type={'select'}\r\n                                                    options={risksList}\r\n                                                    name={`riskId[${i}.risk`}\r\n                                                    isDisabled={true}\r\n                                                    defaultValue={get(item, 'risk')}\r\n                                                    property={{hideLabel: true}}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Field\r\n                                                    type={'select'}\r\n                                                    options={insuranceClasses}\r\n                                                    name={`riskId[${i}.classeId`}\r\n                                                    isDisabled={true}\r\n                                                    defaultValue={get(item, 'classeId')}\r\n                                                    property={{\r\n                                                        hideLabel: true,\r\n                                                        bgColor: get(findItem(get(insuranceClassesList, 'data.data'), get(item, 'classeId')), 'color')\r\n                                                    }}\r\n                                                />\r\n                                            </td>\r\n                                            <td className={'cursor-pointer'}\r\n                                                onClick={() => removeRiskList(get(item, 'id', null))}><Trash2\r\n                                                color={'#dc2626'}/></td>\r\n                                        </tr>)}\r\n                                    </Table>\r\n                                </Col>}\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} className={'mt-32'}>\r\n                            <Button className={'mr-16'} type={'button'} onClick={reset} danger outlined\r\n                                    back>{t(\"Отменить\")}</Button>\r\n                            <Button dark className={'mr-16'} type={'button'} onClick={prevStep}\r\n                                    outlined>{t(\"Назад\")}</Button>\r\n                            <Button type={'submit'} success>{t(\"Продолжить\")}</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default memo(StepOne);","import React from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport styled from \"styled-components\";\r\nimport checkImg from \"../../../../assets/images/check.png\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Styled = styled.div`\r\n  .result {\r\n    padding: 30px 50px;\r\n    border: 1px solid #ADADAD;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    border-radius: 15px;\r\n    margin-top: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    p{\r\n      font-size: 32px;\r\n    }\r\n   \r\n  }\r\n  a{\r\n    margin-top: 25px;\r\n    display: inline-block;\r\n    color: #1D283A;\r\n    transition: 0.3s ease;\r\n    &:hover{\r\n      color: #13D6D1;\r\n    }\r\n  }\r\n`\r\n\r\nconst StepSix = ({...rest}) => {\r\n\r\n    return (<Styled {...rest}>\r\n        <Row justify={'center'}>\r\n            <Col xs={12}>\r\n                <StepNav step={6}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <div className=\"result\">\r\n                    <img className={'img-fluid'} src={checkImg} alt=\"check\"/>\r\n                    <p>Продукт успешно добавлен!</p>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <Link to={'/dashboard'}>Перейти на главную страницу</Link>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    </Styled>);\r\n};\r\n\r\nexport default StepSix;","import React, {useState} from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport {useSettingsStore} from \"../../../../store\";\r\nimport {get, head, includes} from \"lodash\"\r\nimport {useGetAllQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\n\r\nconst StepThree = ({...props}) => {\r\n    const [show, setShow] = useState({\r\n        Isfixedpolicyholder: false,\r\n        Isfixedbeneficiary: false,\r\n        Isfixedpremium: false,\r\n        Isfixedrate: false,\r\n        Isfixedsuminsured: false,\r\n        Isfixedfee: false,\r\n        Isfixedpreventivemeasures: false\r\n    })\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n\r\n    const nextStep = ({data}) => {\r\n        setProduct(data);\r\n        props.nextStep();\r\n    }\r\n\r\n    const prevStep = () => {\r\n        props.previousStep();\r\n    }\r\n\r\n    const reset = () => {\r\n        resetProduct();\r\n        resetRiskList();\r\n        props.firstStep();\r\n    }\r\n\r\n    let {data: agents} = useGetAllQuery({key: KEYS.agents, url: URLS.agents})\r\n    agents = getSelectOptionsListFromData(get(agents, `data.data`, []), '_id', 'inn')\r\n\r\n    let {data: policyformats} = useGetAllQuery({key: KEYS.policyformats, url: URLS.policyformats})\r\n    policyformats = getSelectOptionsListFromData(get(policyformats, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: refunds} = useGetAllQuery({key: KEYS.typeofrefund, url: URLS.typeofrefund})\r\n    refunds = getSelectOptionsListFromData(get(refunds, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: claimSettlements} = useGetAllQuery({key: KEYS.typeofclaimsettlement, url: URLS.typeofclaimsettlement})\r\n    claimSettlements = getSelectOptionsListFromData(get(claimSettlements, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: payments} = useGetAllQuery({key: KEYS.typeofpayment, url: URLS.typeofpayment})\r\n    payments = getSelectOptionsListFromData(get(payments, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: polices} = useGetAllQuery({key: KEYS.typeofpolice, url: URLS.typeofpolice})\r\n    polices = getSelectOptionsListFromData(get(polices, `data.data`, []), '_id', 'name')\r\n\r\n\r\n    const showField = (value, name) => {\r\n        if (includes(['Isfixedpolicyholder', 'Isfixedbeneficiary', 'Isfixedpremium', 'Isfixedrate', 'Isfixedsuminsured', 'Isfixedfee', 'Isfixedpreventivemeasures'], name)) {\r\n            setShow(prev => ({...prev, [name]: value}))\r\n        }\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <StepNav step={3}/>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <Form formRequest={nextStep} getValueFromField={showField}>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированного страхователя'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedpolicyholder'}\r\n                                   defaultValue={get(product,'Isfixedpolicyholder',false)}\r\n                                   property={{hasRequiredLabel: true}}\r\n                            />\r\n                            {get(show, 'Isfixedpolicyholder', false) &&\r\n                                <Field label={'Имеет фиксированного страхователя'}\r\n                                       type={'select'}\r\n                                       name={'fixedpolicyholder'}\r\n                                       property={{hideLabel: true}}\r\n                                       options={agents}\r\n                                       defaultValue={get(product,'fixedpolicyholder')}\r\n                                />}\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет  выгодоприобретеля'}\r\n                                   type={'switch'}\r\n                                   name={'Isbeneficiary'}\r\n                                   defaultValue={get(product,'Isbeneficiary',false)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет  фиксированного выгодоприобретеля'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedbeneficiary'}\r\n                                   defaultValue={get(product,'Isfixedbeneficiary',false)}\r\n\r\n                            />\r\n                            {get(show, 'Isfixedbeneficiary', false) &&\r\n                                <Field label={'Имеет фиксированного страхователя'}\r\n                                       type={'select'}\r\n                                       name={'fixedbeneficiary'}\r\n                                       property={{hideLabel: true}}\r\n                                       options={agents}\r\n                                       defaultValue={get(product,'fixedbeneficiary')}\r\n                                />}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированную премию'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedpremium'}\r\n                                   defaultValue={get(product,'Isfixedpremium',false)}\r\n                            />\r\n                            {get(show, 'Isfixedpremium', false) && <Field\r\n                                type={'number-format-input'}\r\n                                name={'fixedpremium'}\r\n                                property={{hideLabel: true}}\r\n                                defaultValue={get(product,'fixedpremium',0)}\r\n                            />}\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет диапазон ставок'}\r\n                                   type={'switch'}\r\n                                   name={'Isbettingrange'}\r\n                                   defaultValue={get(product,'Isbettingrange',false)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированную ставку'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedrate'}\r\n                                   defaultValue={get(product,'Isfixedrate',false)}\r\n                            />\r\n                            {get(show, 'Isfixedrate', false) && <Field\r\n                                type={'number-format-input'}\r\n                                name={'fixedrate'}\r\n                                property={{hideLabel: true, suffix: \" %\"}}\r\n                                defaultValue={get(product,'fixedrate',0)}\r\n                            />}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированную страховую сумму'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedsuminsured'}\r\n                                   defaultValue={get(product,'Isfixedsuminsured',false)}\r\n                            />\r\n                            {get(show, 'Isfixedsuminsured', false) && <Field\r\n                                type={'number-format-input'}\r\n                                name={'fixedsuminsured'}\r\n                                property={{hideLabel: true}}\r\n                                defaultValue={get(product,'fixedsuminsured',0)}\r\n                            />}\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированную комиссию'}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedfee'}\r\n                                   defaultValue={get(product,'Isfixedfee',false)}\r\n                            />\r\n                            {get(show, 'Isfixedfee', false) && <Field\r\n                                type={'number-format-input'}\r\n                                name={'fixedfee'}\r\n                                property={{hideLabel: true, suffix: \" %\"}}\r\n                                defaultValue={get(product,'fixedfee',0)}\r\n                            />}\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Имеет фиксированный превентивных мероприятий '}\r\n                                   type={'switch'}\r\n                                   name={'Isfixedpreventivemeasures'}\r\n                                   defaultValue={get(product,'Isfixedpreventivemeasures',false)}\r\n                            />\r\n                            {get(show, 'Isfixedpreventivemeasures', false) && <Field\r\n                                type={'number-format-input'}\r\n                                name={'fixedpreventivemeasures'}\r\n                                property={{hideLabel: true, suffix: \" %\"}}\r\n                                defaultValue={get(product,'fixedpreventivemeasures',0)}\r\n                            />}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Разрешить полис без оплаты'}\r\n                                   type={'switch'}\r\n                                   name={'Ispolicywithoutpayment'}\r\n                                   defaultValue={get(product,'Ispolicywithoutpayment',false)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Разрешить несколько агентов'}\r\n                                   type={'switch'}\r\n                                   name={'Ismultipleagents'}\r\n                                   defaultValue={get(product,'Ismultipleagents',false)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Разрешить изменение франшизы'}\r\n                                   type={'switch'}\r\n                                   name={'Isfranchisechange'}\r\n                                   defaultValue={get(product,'Isfranchisechange',false)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Разрешать иностранную валюту'}\r\n                                   type={'switch'}\r\n                                   name={'Isforeigncurrency'}\r\n                                   defaultValue={get(product,'Isforeigncurrency',false)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Форматы полисов'}\r\n                                   type={'select'}\r\n                                   name={'policyformatId'}\r\n                                   options={policyformats}\r\n                                   defaultValue={get(product,'policyformatId')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field label={'Вид урегулирования претензии'}\r\n                                   type={'select'}\r\n                                   name={'typeofclaimsettlement'}\r\n                                   options={claimSettlements}\r\n                                   defaultValue={get(product,'typeofclaimsettlement')}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field label={'Тип возмещения'}\r\n                                   type={'radio-group'}\r\n                                   name={'typeofrefund'}\r\n                                   options={refunds}\r\n                                   defaultValue={get(product,'typeofrefund',get(head(refunds),'value'))}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                options={payments}\r\n                                label={'Тип оплаты'}\r\n                                type={'checkbox'}\r\n                                name={'typeofpayment'}\r\n                                defaultValue={get(product,'typeofpayment')}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                options={polices}\r\n                                label={'Тип полиса'}\r\n                                type={'checkbox'}\r\n                                name={'typeofpolice'}\r\n                                defaultValue={get(product,'typeofpolice')}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className={'mb-25'}>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                label={'Укажите минимальный срок страхования в днях'}\r\n                                type={'number-format-input'}\r\n                                name={'minimumterminsurance'}\r\n                                defaultValue={get(product,'minimumterminsurance',0)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                label={'Укажите максимальный срок страхования в днях'}\r\n                                type={'number-format-input'}\r\n                                name={'maxterminsurance'}\r\n                                defaultValue={get(product,'maxterminsurance',0)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} className={'mt-32'}>\r\n                            <Button className={'mr-16'} type={'button'} onClick={reset} danger outlined\r\n                                    back>Отменить</Button>\r\n                            <Button dark className={'mr-16'} type={'button'} onClick={prevStep}\r\n                                    outlined>Назад</Button>\r\n                            <Button type={'submit'} success>Продолжить</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default StepThree;","import React, {useState} from 'react';\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport StepNav from \"../../../../components/step-nav\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport {useSettingsStore} from \"../../../../store\";\r\nimport {get, includes} from \"lodash\"\r\nimport Flex from \"../../../../components/flex\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {useDeleteQuery, useGetAllQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport styled from \"styled-components\";\r\nimport {Download, Trash2} from \"react-feather\";\r\n\r\nconst Styled = styled.div`\r\n  .doc-files {\r\n    background: #FFFFFF;\r\n    border: 1px solid #9A9A9A;\r\n    border-radius: 10px;\r\n    padding: 30px;\r\n    max-width: 400px;\r\n    li{\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      margin-bottom: 15px;\r\n      &:last-child{\r\n        margin-bottom: 0;\r\n      }\r\n      span{\r\n        font-family: 'Gilroy-Bold', sans-serif;\r\n      }\r\n      a{\r\n      margin-right: 10px;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst StepTwo = ({...props}) => {\r\n\r\n    const [show, setShow] = useState({isapplicationform: false, iscontractform: false, Isadditionaldocuments: false})\r\n\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n\r\n    const {data:applicationformdocs} = useGetAllQuery({key: KEYS.applicationformdocs, url: URLS.applicationformdocs})\r\n    const {data:contractform} = useGetAllQuery({key: KEYS.contractform, url: URLS.contractform})\r\n    const {data:additionaldocuments} = useGetAllQuery({key: KEYS.additionaldocuments, url: URLS.additionaldocuments})\r\n    const {mutate: deleteApplicationFormDocs} = useDeleteQuery({listKeyId: KEYS.applicationformdocs})\r\n    const {mutate: deleteContactForm} = useDeleteQuery({listKeyId: KEYS.contractform})\r\n    const {mutate: deleteAdditionalDocs} = useDeleteQuery({listKeyId: KEYS.additionaldocuments})\r\n\r\n\r\n    const nextStep = ({data}) => {\r\n        setProduct(data);\r\n        props.nextStep();\r\n    }\r\n\r\n    const prevStep = () => {\r\n        props.previousStep();\r\n    }\r\n\r\n    const reset = () => {\r\n        resetProduct();\r\n        resetRiskList();\r\n        props.firstStep();\r\n    }\r\n\r\n    const showFile = (value, name) => {\r\n        if (includes(['isapplicationform', 'iscontractform', 'Isadditionaldocuments'], name)) {\r\n            setShow(prev => ({...prev, [name]: value}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Styled>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <StepNav step={2}/>\r\n                </Col>\r\n                <Col xs={12}>\r\n                    <Form formRequest={nextStep} getValueFromField={showFile}>\r\n                        <Row className={'mb-25'}>\r\n                            <Col xs={4}>\r\n                                <Flex align={'flex-end'}>\r\n                                    <Field label={'Имеет форму анкеты заявления'} type={'switch'}\r\n                                           name={'isapplicationform'}\r\n                                            defaultValue={get(product,'isapplicationform',false)}\r\n\r\n                                    />\r\n                                    {get(show, 'isapplicationform', false) &&\r\n                                        <Field className={'ml-50'} label={'Имеет форму анкеты заявления'}\r\n                                               type={'dropzone'}\r\n                                               name={'applicationformId'}\r\n                                               property={{hideLabel: true, url: URLS.applicationformdocs,key:KEYS.applicationformdocs}}/>}\r\n                                </Flex>\r\n                                {get(show, 'isapplicationform', false) && <ul className={'doc-files'}>\r\n                                    {get(applicationformdocs,'data.data',false) && get(applicationformdocs,'data.data',[]).map(file =><li key={get(file,'_id')}>\r\n                                        <span>{get(file,'name','-')}</span> <div><a href={get(file,'url','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a>\r\n                                        <Trash2 onClick={()=>deleteApplicationFormDocs({url: `${URLS.applicationformdocs}/${get(file,'_id',null)}`})} className={'cursor-pointer '} color={'#dc2626'} /></div>\r\n                                    </li>)}\r\n                                </ul>}\r\n\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Flex align={'flex-end'}>\r\n                                    <Field label={'Имеет конракт'} type={'switch'} name={'iscontractform'}\r\n                                           defaultValue={get(product,'iscontractform',false)} />\r\n                                    {get(show, 'iscontractform', false) &&\r\n                                        <Field className={'ml-50'} label={'Имеет форму анкеты заявления'}\r\n                                               type={'dropzone'}\r\n                                               name={'contractform'}\r\n                                               property={{hideLabel: true, url: URLS.contractform,key:KEYS.contractform}}/>}\r\n                                </Flex>\r\n                                {get(show, 'iscontractform', false) && <ul className={'doc-files'}>\r\n                                    {get(contractform,'data.data',false) && get(contractform,'data.data',[]).map(file =><li key={get(file,'_id')}>\r\n                                        <span>{get(file,'name','-')}</span> <div><a href={get(file,'url','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a>\r\n                                        <Trash2 onClick={()=>deleteContactForm({url: `${URLS.contractform}/${get(file,'_id',null)}`})} className={'cursor-pointer '} color={'#dc2626'} /></div>\r\n                                    </li>)}\r\n                                </ul>}\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Flex align={'flex-end'}>\r\n                                    <Field label={'Имеет приложение'} type={'switch'} name={'Isadditionaldocuments'}\r\n                                           defaultValue={get(product,'Isadditionaldocuments',false)} />\r\n                                    {get(show, 'Isadditionaldocuments', false) &&\r\n                                        <Field className={'ml-50'} label={'Имеет форму анкеты заявления'}\r\n                                               type={'dropzone'}\r\n                                               name={'additionaldocuments'}\r\n                                               property={{hideLabel: true, url: URLS.additionaldocuments,key:KEYS.additionaldocuments}}/>}\r\n                                </Flex>\r\n                                {get(show, 'Isadditionaldocuments', false) && <ul className={'doc-files'}>\r\n                                    {get(additionaldocuments,'data.data',false) && get(additionaldocuments,'data.data',[]).map(file =><li key={get(file,'_id')}>\r\n                                        <span>{get(file,'name','-')}</span> <div><a href={get(file,'url','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a>\r\n                                        <Trash2 onClick={()=>deleteAdditionalDocs({url: `${URLS.additionaldocuments}/${get(file,'_id',null)}`})} className={'cursor-pointer '} color={'#dc2626'} /></div>\r\n                                    </li>)}\r\n                                </ul>}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs={12} className={'mt-32'}>\r\n                                <Button className={'mr-16'} type={'button'} onClick={reset} danger outlined\r\n                                        back>Отменить</Button>\r\n                                <Button dark className={'mr-16'} type={'button'} onClick={prevStep}\r\n                                        outlined>Назад</Button>\r\n                                <Button type={'submit'} success>Продолжить</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default StepTwo;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Download = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"7 10 12 15 17 10\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"15\",\n    x2: \"12\",\n    y2: \"3\"\n  }));\n});\nDownload.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nDownload.displayName = 'Download';\nexport default Download;"],"names":["id","props","resetProduct","useSettingsStore","state","get","resetRiskList","product","usePostQuery","listKeyId","KEYS","createProduct","mutate","isLoading","usePutQuery","updateProduct","updateLoading","groups","useGetAllQuery","key","url","URLS","data","getSelectOptionsListFromData","subGroups","insurances","status","polices","persons","payments","policyformats","applicationformdocs","contractform","additionaldocuments","findItem","items","multiple","filter","item","includes","map","label","join","find","isEqual","xs","step","formRequest","attributes","onSuccess","nextStep","onError","className","thead","href","target","download","color","type","onClick","firstStep","danger","outlined","back","dark","previousStep","success","useState","riskOptions","fields","setFields","agentlist","limitofagreement","Isagreement","tariffperclasses","tarif","setTarif","tariffList","setTariffList","setProduct","agents","classes","classOptions","risks","risksOptions","franchises","baseFranchises","list","l","rest","getValueFromField","value","name","prev","setWith","align","options","defaultValue","property","placeholder","result","tariff","isNil","toast","res","t","min","max","length","hideThead","i","hideLabel","bgColor","isDisabled","justify","suffix","c","j","disabled","f","removeTariffFromList","StepOne","useTranslation","riskItem","setRiskItem","productGroupId","setProductGroupId","riskTypeId","setRiskTypeId","addRiskList","removeRiskList","riskList","bcoTypes","useEffect","isEmpty","classeId","risk","riskgroup","useGetOneQuery","enabled","sectors","riskGroups","risksList","risksData","insuranceClassesList","insuranceClasses","console","log","params","required","hasRequiredLabel","classItem","head","some","values","val","memo","Styled","styled","src","checkImg","alt","to","Isfixedpolicyholder","Isfixedbeneficiary","Isfixedpremium","Isfixedrate","Isfixedsuminsured","Isfixedfee","Isfixedpreventivemeasures","show","setShow","refunds","claimSettlements","isapplicationform","iscontractform","Isadditionaldocuments","deleteApplicationFormDocs","useDeleteQuery","deleteContactForm","deleteAdditionalDocs","file","_extends","Object","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Download","forwardRef","_ref","ref","_ref$color","_ref$size","size","React","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","x1","y1","x2","y2","propTypes","PropTypes","displayName"],"sourceRoot":""}