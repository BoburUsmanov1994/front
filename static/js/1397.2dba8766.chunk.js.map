{"version":3,"file":"static/js/1397.2dba8766.chunk.js","mappings":"qSAiGA,EAtFwB,SAAC,GAAc,oBAAC,IAE9BA,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,kBAAkB,kBAGhEE,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,uCACPC,KAAM,WAEV,CACIF,GAAI,EACJC,MAAO,8FACPC,KAAM,+BAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNT,EAAeI,KAChB,IAMH,OACI,+BACI,SAAC,IAAD,CACIM,UAPM,SAAC,GAAD,EAAEC,KAAF,EAAQC,MAAR,EAAsBC,WAAtB,OAA6C,yBAQnDC,gBAAiB,CACb,CACIR,GAAI,EACJS,IAAK,MACLR,MAAO,OAOX,CACID,GAAI,EACJS,IAAK,mBACLR,MAAO,cAEX,CACID,GAAI,EACJS,IAAK,qBACLR,MAAO,eAOX,CACID,GAAI,EACJS,IAAK,QACLR,MAAO,SAEX,CACID,GAAI,EACJS,IAAK,mBACLR,MAAO,QAEX,CACID,GAAI,EACJS,IAAK,qBACLR,MAAO,WAGfS,MAAOC,EAAAA,EAAAA,OACPC,IAAKC,EAAAA,EAAAA,OACLZ,MAAO,8FACPa,gBAAiB,OACjBC,QAAS,eACTC,UAAW,iBACXC,UAAW,iBACXC,cAAY,OCtFtBC,EAASC,EAAAA,GAAAA,IAAH,mFAaZ,EARmB,SAAC,GAAe,IAAXC,EAAU,oBAC9B,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD","sources":["modules/agents/containers/AgentsContainer.jsx","modules/agents/pages/AgentsPage.jsx"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get, isEqual} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\nimport {Col, Row} from \"react-grid-system\";\r\n\r\nconst AgentsContainer = ({...rest}) => {\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Агенты',\r\n            path: '/agents',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Страховые агенты',\r\n            path: '/agents/insurance-agents',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data, rowId = null, personType = null}) => <>\r\n\r\n\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 1,\r\n                        key: 'inn',\r\n                        title: 'INN'\r\n                    },\r\n                    // {\r\n                    //     id: 2,\r\n                    //     key: 'regionId.name',\r\n                    //     title: 'Region'\r\n                    // },\r\n                    {\r\n                        id: 3,\r\n                        key: 'typeofagent.name',\r\n                        title: 'Agent type'\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'typeofpersons.name',\r\n                        title: 'Person type'\r\n                    },\r\n                    // {\r\n                    //     id: 5,\r\n                    //     key: 'address',\r\n                    //     title: 'Address'\r\n                    // },\r\n                    {\r\n                        id: 6,\r\n                        key: 'email',\r\n                        title: 'Email'\r\n                    },\r\n                    {\r\n                        id: 7,\r\n                        key: 'accountrole.name',\r\n                        title: 'Role'\r\n                    },\r\n                    {\r\n                        id: 8,\r\n                        key: 'accountstatus.name',\r\n                        title: 'Status'\r\n                    },\r\n                ]}\r\n                keyId={KEYS.agents}\r\n                url={URLS.agents}\r\n                title={'Страховые агенты'}\r\n                responseDataKey={'data'}\r\n                viewUrl={'/agents/view'}\r\n                createUrl={'/agents/create'}\r\n                updateUrl={'/agents/update'}\r\n                isHideColumn\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AgentsContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport AgentsContainer from \"../containers/AgentsContainer\";\r\n\r\nconst Styled = styled.div`\r\n    .rodal-dialog{\r\n      width: 800px !important;\r\n    }\r\n`;\r\nconst AgentsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <AgentsContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default AgentsPage;"],"names":["setBreadcrumbs","useStore","state","get","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","data","rowId","personType","tableHeaderData","key","keyId","KEYS","url","URLS","responseDataKey","viewUrl","createUrl","updateUrl","isHideColumn","Styled","styled","rest"],"sourceRoot":""}