{"version":3,"file":"static/js/2012.2cfd8bc0.chunk.js","mappings":"0UAkEA,EAnD2B,SAAC,GAAc,oBAAC,IAC3BA,GAASC,EAAAA,EAAAA,IAAe,CAACC,IAAIC,EAAAA,EAAAA,QAAaC,IAAIC,EAAAA,EAAAA,UAAnDC,KACDC,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAAIT,EAAD,YAAmB,IAAI,MAAM,QAC5EU,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIH,EAAAA,EAAAA,KAAIG,EAAO,kBAAkB,kBAEhEC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,qEACPC,KAAM,aAEV,CACIF,GAAI,EACJC,MAAO,YACPC,KAAM,0BAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNR,EAAeG,KAChB,IAKH,OACI,+BACI,SAAC,IAAD,CACIM,UAPM,SAAC,GAAD,IAAEb,EAAF,EAAEA,KAAF,IAAOc,MAAAA,OAAP,MAAe,KAAf,SAA0B,iCACxC,SAAC,IAAD,CAAQC,KAAM,OAAQC,KAAM,QAASC,MAAO,mDAAYC,aAAcJ,GAAQX,EAAAA,EAAAA,KAAIH,EAAK,QAAQ,KAAMmB,OAAQ,CAACC,UAAU,MACxH,SAAC,IAAD,CAAQL,KAAM,SAAUC,KAAM,SAAUC,MAAO,SAAUI,QAASpB,EAAciB,aAAcJ,GAAQX,EAAAA,EAAAA,KAAIH,EAAK,cAAc,KAAMmB,OAAQ,CAACC,UAAU,SAM9IE,gBAAiB,CACb,CACIb,GAAI,EACJb,IAAK,OACLc,MAAO,oDAEX,CACID,GAAI,EACJb,IAAK,cACLc,MAAO,WAGfa,MAAO1B,EAAAA,EAAAA,UACPC,IAAKC,EAAAA,EAAAA,UACLW,MAAO,YACPc,gBAAiB,YCvD3BC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EARsB,SAAC,GAAe,IAAXC,EAAU,oBACjC,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD,S,iECaNzB,EAA+B,WAA+C,IAA9CF,EAA6C,uDAAtC,GAAI4B,EAAkC,uDAA1B,KAAMX,EAAoB,uDAAZ,QACnE,OAAOjB,EAAK6B,KAAI,SAAAC,GAAI,MAAK,CAAEF,MAAOE,EAAKF,GAAQX,MAAOa,EAAKb,QAAc","sources":["modules/handbook/containers/DistrictsContainer.jsx","modules/handbook/pages/DistrictsPage.jsx","utils/index.js"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport Panel from \"../../../components/panel\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Search from \"../../../components/search\";\r\nimport Button from \"../../../components/ui/button\";\r\nimport Section from \"../../../components/section\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\nimport Field from \"../../../containers/form/field\";\r\n\r\nconst DistrictsContainer = ({...rest}) => {\r\n    const {data:types} = useGetAllQuery({key:KEYS.regions,url:URLS.regions})\r\n    const typesOptions = getSelectOptionsListFromData(get(types,`data.data`,[]),'_id','name')\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Справочники',\r\n            path: '/handbook',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Districts',\r\n            path: '/handbook/districts',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n    const ModalBody = ({data,rowId = null}) =>  <>\r\n        <Field  name={'name'} type={'input'} label={'Название'} defaultValue={rowId ? get(data,'name'):null} params={{required: true}} />\r\n        <Field  name={'regiId'} type={'select'} label={'Region'} options={typesOptions} defaultValue={rowId ? get(data,'regiId._id'):null} params={{required: true}} />\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 2,\r\n                        key: 'name',\r\n                        title: 'Название'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'regiId.name',\r\n                        title: 'Region'\r\n                    }\r\n                ]}\r\n                keyId={KEYS.districts}\r\n                url={URLS.districts}\r\n                title={'Districts'}\r\n                responseDataKey={'data'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DistrictsContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport DistrictsContainer from \"../containers/DistrictsContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst DistrictsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <DistrictsContainer/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default DistrictsPage;","import {includes} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => ({ value: item[value], label: item[label] })) || [];\r\n}\r\n\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData\r\n}"],"names":["types","useGetAllQuery","key","KEYS","url","URLS","data","typesOptions","getSelectOptionsListFromData","get","setBreadcrumbs","useStore","state","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","rowId","name","type","label","defaultValue","params","required","options","tableHeaderData","keyId","responseDataKey","Styled","styled","rest","value","map","item"],"sourceRoot":""}