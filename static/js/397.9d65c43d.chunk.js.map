{"version":3,"file":"static/js/397.9d65c43d.chunk.js","mappings":"gSAgGA,EAtFwB,SAAC,GAAc,oBAAC,IAE9BA,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,kBAAkB,kBAG3DE,GAAWC,EAAAA,EAAAA,IAAe,CAACC,IAAKC,EAAAA,EAAAA,QAAcC,IAAKC,EAAAA,EAAAA,UAAzDC,KACLN,GAAUO,EAAAA,EAAAA,KAA6BR,EAAAA,EAAAA,KAAIC,EAAD,YAAuB,IAAK,MAAO,QAE7E,IAAWQ,GAAaP,EAAAA,EAAAA,IAAe,CAACC,IAAKC,EAAAA,EAAAA,UAAgBC,IAAKC,EAAAA,EAAAA,YAA7DC,KACLE,GAAYD,EAAAA,EAAAA,KAA6BR,EAAAA,EAAAA,KAAIS,EAAD,YAAyB,IAAK,MAAO,QAEjF,IAAWC,GAAWR,EAAAA,EAAAA,IAAe,CAACC,IAAKC,EAAAA,EAAAA,cAAoBC,IAAKC,EAAAA,EAAAA,gBAA/DC,KACLG,GAAUF,EAAAA,EAAAA,KAA6BR,EAAAA,EAAAA,KAAIU,EAAD,YAAuB,IAAK,MAAO,QAE7E,IAAMC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,uCACPC,KAAM,WAEV,CACIF,GAAI,EACJC,MAAO,8FACPC,KAAM,+BAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNnB,EAAec,KAChB,IAgBH,OACI,+BACI,SAAC,IAAD,CACIM,UAjBM,SAAC,GAAD,IAAEV,EAAF,EAAEA,KAAF,IAAQW,MAAAA,OAAR,MAAgB,KAAhB,SAA0B,iCACxC,SAAC,IAAD,CAAOC,KAAM,WAAYC,KAAM,QAASC,MAAO,YAAaC,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,YAAc,KACnGgB,OAAQ,CAACC,UAAU,MAC1B,SAAC,IAAD,CAAOL,KAAM,MAAOC,KAAM,aAAcC,MAAO,MAAOI,SAAU,CAACC,KAAM,UAAWC,SAAU,KACrFL,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,OAAS,KAAMgB,OAAQ,CAACC,UAAU,EAAMI,QAAS,eACxF,SAAC,IAAD,CAAOT,KAAM,MAAOC,KAAM,aAAcC,MAAO,OAAQI,SAAU,CAACC,KAAM,iBAAkBC,SAAU,KAC7FL,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,OAAS,KAAMgB,OAAQ,CAACC,UAAU,EAAMI,QAAS,eACxF,SAAC,IAAD,CAAOT,KAAM,gBAAiBC,KAAM,SAAUC,MAAO,cAAeQ,QAASnB,EACtEY,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,iBAAmB,KAAMgB,OAAQ,CAACC,UAAU,MACnF,SAAC,IAAD,CAAOL,KAAM,WAAYC,KAAM,SAAUC,MAAO,SAAUQ,QAAS5B,EAC5DqB,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,YAAc,KAAMgB,OAAQ,CAACC,UAAU,MAC9E,SAAC,IAAD,CAAOL,KAAM,cAAeC,KAAM,SAAUC,MAAO,WAAYQ,QAASpB,EACjEa,aAAcJ,GAAQlB,EAAAA,EAAAA,KAAIO,EAAM,eAAiB,KAAMgB,OAAQ,CAACC,UAAU,SAMzEM,gBAAiB,CACb,CACIjB,GAAI,EACJV,IAAK,WACLW,MAAO,oDAEX,CACID,GAAI,EACJV,IAAK,MACLW,MAAO,OAEX,CACID,GAAI,EACJV,IAAK,MACLW,MAAO,OAEX,CACID,GAAI,EACJV,IAAK,gBACLW,MAAO,UAEX,CACID,GAAI,EACJV,IAAK,mBACLW,MAAO,aAGfiB,MAAO3B,EAAAA,EAAAA,OACPC,IAAKC,EAAAA,EAAAA,OACLQ,MAAO,8FACPkB,gBAAiB,YCrF3BC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EARmB,SAAC,GAAe,IAAXC,EAAU,oBAC9B,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD,S,iECaN3B,EAA+B,WAA+C,IAA9CD,EAA6C,uDAAtC,GAAI6B,EAAkC,uDAA1B,KAAMf,EAAoB,uDAAZ,QACnE,OAAOd,EAAK8B,KAAI,SAAAC,GAAI,MAAK,CAAEF,MAAOE,EAAKF,GAAQf,MAAOiB,EAAKjB,QAAc","sources":["modules/agents/containers/AgentsContainer.jsx","modules/agents/pages/AgentsPage.jsx","utils/index.js"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\n\r\nconst AgentsContainer = ({...rest}) => {\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n\r\n    let {data: regions} = useGetAllQuery({key: KEYS.regions, url: URLS.regions})\r\n    regions = getSelectOptionsListFromData(get(regions, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: districts} = useGetAllQuery({key: KEYS.districts, url: URLS.districts})\r\n    districts = getSelectOptionsListFromData(get(districts, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: persons} = useGetAllQuery({key: KEYS.typeofpersons, url: URLS.typeofpersons})\r\n    persons = getSelectOptionsListFromData(get(persons, `data.data`, []), '_id', 'name')\r\n\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Агенты',\r\n            path: '/agents',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Страховые агенты',\r\n            path: '/agents/insurance-agents',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data, rowId = null}) => <>\r\n        <Field name={'fullName'} type={'input'} label={'Full Name'} defaultValue={rowId ? get(data, 'fullName') : null}\r\n               params={{required: true}}/>\r\n        <Field name={'inn'} type={'input-mask'} label={'INN'} property={{mask: '9999999', maskChar: '_'}}\r\n               defaultValue={rowId ? get(data, 'inn') : null} params={{required: true, pattern: /^[0-9]*$/}}/>\r\n        <Field name={'pin'} type={'input-mask'} label={'PNFL'} property={{mask: '99999999999999', maskChar: '_'}}\r\n               defaultValue={rowId ? get(data, 'pin') : null} params={{required: true, pattern: /^[0-9]*$/}}/>\r\n        <Field name={'typeofpersons'} type={'select'} label={'Person type'} options={persons}\r\n               defaultValue={rowId ? get(data, 'typeofpersons') : null} params={{required: true}}/>\r\n        <Field name={'regionId'} type={'select'} label={'Region'} options={regions}\r\n               defaultValue={rowId ? get(data, 'regionId') : null} params={{required: true}}/>\r\n        <Field name={'districtsId'} type={'select'} label={'District'} options={districts}\r\n               defaultValue={rowId ? get(data, 'districtsId') : null} params={{required: true}}/>\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 2,\r\n                        key: 'fullName',\r\n                        title: 'Название'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'inn',\r\n                        title: 'INN'\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'pin',\r\n                        title: 'PIN'\r\n                    },\r\n                    {\r\n                        id: 5,\r\n                        key: 'regionId.name',\r\n                        title: 'Region'\r\n                    },\r\n                    {\r\n                        id: 6,\r\n                        key: 'districtsId.name',\r\n                        title: 'District'\r\n                    },\r\n                ]}\r\n                keyId={KEYS.agents}\r\n                url={URLS.agents}\r\n                title={'Страховые агенты'}\r\n                responseDataKey={'data'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AgentsContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport AgentsContainer from \"../containers/AgentsContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst AgentsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <AgentsContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default AgentsPage;","import {includes} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => ({ value: item[value], label: item[label] })) || [];\r\n}\r\n\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData\r\n}"],"names":["setBreadcrumbs","useStore","state","get","regions","useGetAllQuery","key","KEYS","url","URLS","data","getSelectOptionsListFromData","districts","persons","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","rowId","name","type","label","defaultValue","params","required","property","mask","maskChar","pattern","options","tableHeaderData","keyId","responseDataKey","Styled","styled","rest","value","map","item"],"sourceRoot":""}