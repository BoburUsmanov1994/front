{"version":3,"file":"static/js/997.4d7c4374.chunk.js","mappings":"4QA0FA,EAlF0B,SAAC,GAAc,oBAAC,IAChCA,GAAeC,EAAAA,EAAAA,IAAiB,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,gBAAgB,kBAEpEE,GAAgBH,EAAAA,EAAAA,IAAiB,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,gBAAiB,OACtEG,GAAiBC,EAAAA,EAAAA,IAAS,SAAAJ,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,kBAAkB,kBAEhEK,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,mDACPC,KAAM,aAEV,CACIF,GAAI,EACJC,MAAO,sEACPC,KAAM,oBAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNP,EAAeE,GACfP,IACAI,MACD,IAMH,OACI,+BACI,SAAC,IAAD,CACIS,UAPM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,IAAQC,MAAAA,OAAR,MAAgB,KAAhB,SAA0B,+BACxC,SAAC,IAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,MAAO,oGAAqBC,aAAcJ,GAAQZ,EAAAA,EAAAA,KAAIW,EAAM,QAAU,KACnGM,OAAQ,CAACC,UAAU,QAMlBC,gBAAiB,CACb,CACIb,GAAI,EACJc,IAAK,cACLb,MAAO,6HAEX,CACID,GAAI,EACJc,IAAK,eACLb,MAAO,wFACPc,SAAQ,GAEZ,CACIf,GAAI,EACJc,IAAK,gBACLb,MAAO,0DACPc,SAAQ,GAEZ,CACIf,GAAI,EACJc,IAAK,uBACLb,MAAO,4EAEX,CACID,GAAI,EACJc,IAAK,sBACLb,MAAO,6EAEX,CACID,GAAI,EACJc,IAAK,eACLb,MAAO,wFACPe,iBAAgB,IAGxBC,MAAOC,EAAAA,EAAAA,SACPC,IAAKC,EAAAA,EAAAA,SACLnB,MAAO,sEACPoB,gBAAiB,OACjBC,QAAS,iBACTC,UAAW,mBACXC,UAAW,mBACXC,cAAY,OC/EtBC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EARqB,SAAC,GAAe,IAAXC,EAAU,oBAChC,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD","sources":["modules/products/containers/ProductsContainer.jsx","modules/products/pages/ProductsPage.jsx"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useSettingsStore, useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\n\r\nconst ProductsContainer = ({...rest}) => {\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const resetRiskList = useSettingsStore(state => get(state, 'resetRiskList', []))\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Продукты',\r\n            path: '/products',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Все продукты',\r\n            path: '/products/all',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n        resetProduct()\r\n        resetRiskList()\r\n    }, [])\r\n\r\n    const ModalBody = ({data, rowId = null}) => <>\r\n        <Field name={'name'} type={'input'} label={'Название продукта'} defaultValue={rowId ? get(data, 'name') : null}\r\n               params={{required: true}}/>\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 2,\r\n                        key: 'productname',\r\n                        title: 'Наименование продукта'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'typeofpolice',\r\n                        title: 'Тип страховщика',\r\n                        isArray:true\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'typeofpayment',\r\n                        title: 'Тип оплаты',\r\n                        isArray:true\r\n                    },\r\n                    {\r\n                        id: 5,\r\n                        key: 'typeofinsurerId.name',\r\n                        title: 'Страхователь',\r\n                    },\r\n                    {\r\n                        id: 6,\r\n                        key: 'policyformatId.name',\r\n                        title: 'Формат полиса',\r\n                    },\r\n                    {\r\n                        id: 7,\r\n                        key: 'fixedpremium',\r\n                        title: 'Страховая сумма',\r\n                        hasNumberFormat:true\r\n                    },\r\n                ]}\r\n                keyId={KEYS.products}\r\n                url={URLS.products}\r\n                title={'Все продукты'}\r\n                responseDataKey={'data'}\r\n                viewUrl={'/products/view'}\r\n                createUrl={'/products/create'}\r\n                updateUrl={'/products/update'}\r\n                isHideColumn\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductsContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport ProductsContainer from \"../containers/ProductsContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst ProductsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <ProductsContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ProductsPage;"],"names":["resetProduct","useSettingsStore","state","get","resetRiskList","setBreadcrumbs","useStore","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","data","rowId","name","type","label","defaultValue","params","required","tableHeaderData","key","isArray","hasNumberFormat","keyId","KEYS","url","URLS","responseDataKey","viewUrl","createUrl","updateUrl","isHideColumn","Styled","styled","rest"],"sourceRoot":""}