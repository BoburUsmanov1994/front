{"version":3,"file":"static/js/6459.a8675004.chunk.js","mappings":"iSA+EA,EArEsB,SAAC,GAAc,oBAAC,IACtBA,GAASC,EAAAA,EAAAA,IAAe,CAACC,IAAIC,EAAAA,EAAAA,WAAgBC,IAAIC,EAAAA,EAAAA,aAAtDC,KACDC,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAAIT,EAAD,YAAmB,IAAI,MAAM,QAEtEU,GAAWT,EAAAA,EAAAA,IAAe,CAACC,IAAIC,EAAAA,EAAAA,QAAaC,IAAIC,EAAAA,EAAAA,UAArDC,KACDK,GAAeH,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAAIC,EAAD,YAAqB,IAAI,MAAM,QAE9EE,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIL,EAAAA,EAAAA,KAAIK,EAAO,kBAAkB,kBAEhEC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,qEACPC,KAAM,aAEV,CACIF,GAAI,EACJC,MAAO,2BACPC,KAAM,qBAGX,KAEHC,EAAAA,EAAAA,YAAU,WACNR,EAAeG,KAChB,IAQH,OACI,+BACI,SAAC,IAAD,CACIM,UATM,SAAC,GAAD,IAAEf,EAAF,EAAEA,KAAF,IAAOgB,MAAAA,OAAP,MAAe,KAAf,SAA0B,iCACxC,SAAC,IAAD,CAAQC,KAAM,OAAQC,KAAM,QAASC,MAAO,kFAAkBC,aAAcJ,GAAQb,EAAAA,EAAAA,KAAIH,EAAK,QAAQ,KAAMqB,OAAQ,CAACC,UAAU,MAC9H,SAAC,IAAD,CAAQL,KAAM,gBAAiBC,KAAM,SAAUC,MAAO,gDAAcI,QAAStB,EAAcmB,aAAcJ,GAAQb,EAAAA,EAAAA,KAAIH,EAAK,iBAAiB,KAAMqB,OAAQ,CAACC,UAAU,MACpK,SAAC,IAAD,CAAQL,KAAM,YAAaC,KAAM,SAAUC,MAAO,SAAUI,QAASlB,EAAce,aAAcJ,GAAQb,EAAAA,EAAAA,KAAIH,EAAK,aAAa,KAAMqB,OAAQ,CAACC,UAAU,MACxJ,SAAC,IAAD,CAAQL,KAAM,iBAAkBC,KAAM,QAASC,MAAO,mBAAoBK,SAAU,CAACN,KAAK,UAAWE,aAAcJ,GAAQb,EAAAA,EAAAA,KAAIH,EAAK,kBAAkB,KAAMqB,OAAQ,CAACC,UAAU,SAMvKG,gBAAiB,CACb,CACId,GAAI,EACJf,IAAK,OACLgB,MAAO,mFAEX,CACID,GAAI,EACJf,IAAK,qBACLgB,MAAO,sDAEX,CACID,GAAI,EACJf,IAAK,iBACLgB,MAAO,SAEX,CACID,GAAI,EACJf,IAAK,iBACLgB,MAAO,oBAGfc,MAAO7B,EAAAA,EAAAA,KACPC,IAAKC,EAAAA,EAAAA,KACLa,MAAO,2BACPe,gBAAiB,YCpE3BC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EARiB,SAAC,GAAe,IAAXC,EAAU,oBAC5B,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD","sources":["modules/handbook/containers/RiskContainer.jsx","modules/handbook/pages/RiskPage.jsx"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\n\r\nconst RiskContainer = ({...rest}) => {\r\n    const {data:types} = useGetAllQuery({key:KEYS.typeofrisk,url:URLS.typeofrisk})\r\n    const typesOptions = getSelectOptionsListFromData(get(types,`data.data`,[]),'_id','name')\r\n\r\n    const {data:classes} = useGetAllQuery({key:KEYS.classes,url:URLS.classes})\r\n    const typesClasses = getSelectOptionsListFromData(get(classes,`data.data`,[]),'_id','name')\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Справочники',\r\n            path: '/handbook',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Риск',\r\n            path: '/handbook/risk',\r\n        },\r\n\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data,rowId = null}) =>  <>\r\n        <Field  name={'name'} type={'input'} label={'Название риска'} defaultValue={rowId ? get(data,'name'):null} params={{required: true}} />\r\n        <Field  name={'typeofrisksId'} type={'select'} label={'Tипа риск '} options={typesOptions} defaultValue={rowId ? get(data,'typeofrisksId'):null} params={{required: true}} />\r\n        <Field  name={'classesId'} type={'select'} label={'Class '} options={typesClasses} defaultValue={rowId ? get(data,'classesId'):null} params={{required: true}} />\r\n        <Field  name={'categorynumber'} type={'input'} label={'Category number '} property={{type:'number'}} defaultValue={rowId ? get(data,'categorynumber'):null} params={{required: true}} />\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 2,\r\n                        key: 'name',\r\n                        title: 'Название риска'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'typeofrisksId.name',\r\n                        title: 'Tипа риска'\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'classesId.name',\r\n                        title: 'Class'\r\n                    },\r\n                    {\r\n                        id: 5,\r\n                        key: 'categorynumber',\r\n                        title: 'Category number'\r\n                    },\r\n                ]}\r\n                keyId={KEYS.risk}\r\n                url={URLS.risk}\r\n                title={'Риск'}\r\n                responseDataKey={'data'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RiskContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport RiskContainer from \"../containers/RiskContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst RiskPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <RiskContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default RiskPage;"],"names":["types","useGetAllQuery","key","KEYS","url","URLS","data","typesOptions","getSelectOptionsListFromData","get","classes","typesClasses","setBreadcrumbs","useStore","state","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","rowId","name","type","label","defaultValue","params","required","options","property","tableHeaderData","keyId","responseDataKey","Styled","styled","rest"],"sourceRoot":""}