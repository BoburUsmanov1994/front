{"version":3,"file":"static/js/216.f7767514.chunk.js","mappings":"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","sources":["components/panel/index.jsx","components/search/index.jsx","components/section/index.jsx","components/ui/title/index.jsx","modules/agents/containers/AgentsCreateContainer.jsx","modules/agents/pages/AgentsCreatePage.jsx","utils/index.js"],"sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.div`\r\n  padding: 12px 15px;\r\n  background-color: #F7F7F7;\r\n  width: 100%;\r\n  display: block;\r\n`;\r\n\r\nconst Panel = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Panel;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.form`\r\n  display: flex;\r\n\r\n  .search-form-input {\r\n    padding: 15px 25px;\r\n    border: 1px solid #CDCDCD;\r\n    border-radius: 5px 0px 0px 5px;\r\n    display: block;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: 0.2s ease;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Regular', sans-serif;\r\n\r\n    &:focus {\r\n      border-color: #13D6D1;\r\n    }\r\n  }\r\n\r\n  .search-form-btn {\r\n    padding: 15px 20px;\r\n    min-width: 175px;\r\n    text-align: center;\r\n    border: none;\r\n    background: #13D6D1;\r\n    border-radius: 0px 5px 5px 0px;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Search = ({\r\n                    ...rest\r\n                }) => {\r\n    const {register, handleSubmit} = useForm();\r\n    const {t} = useTranslation()\r\n    const onSubmit = (data) => {\r\n        console.log('search', data)\r\n    }\r\n    return (\r\n        <Styled onSubmit={handleSubmit(onSubmit)} {...rest}>\r\n            <input placeholder={t('Поиск')}  {...register(\"search\")} type=\"text\" className={'search-form-input'}/>\r\n            <button className={'search-form-btn'} type={'submit'}>{t(\"Найти\")}</button>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.section`\r\n  padding: 25px 15px;\r\n  background-color: #fff;\r\n  \r\n`;\r\nconst Section = ({\r\n                     children,\r\n                     ...rest\r\n                 }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useEffect, useState,useRef} from 'react';\r\nimport styled,{css} from \"styled-components\";\r\n\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h2{\r\n    padding-right: 25px;\r\n    font-size: 24px;\r\n    color: #000;\r\n    font-family: 'Gilroy-Bold', sans-serif;\r\n    margin-bottom: 0;\r\n  }\r\n  .line{\r\n    height: 1px;\r\n    background-color: #E5E5E5;\r\n    margin-top: 5px;\r\n    ${({w}) => w && `width: calc(100% - ${w}px - 10px);`}\r\n  }\r\n  \r\n  ${({sm}) => sm && css`\r\n    h2 {\r\n      font-size: 18px;\r\n    }\r\n  `}\r\n`;\r\nconst Title = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    const [width,setWidth] = useState(0);\r\n    useEffect(()=>{\r\n        setWidth(ref.current.clientWidth)\r\n    },[])\r\n    const ref = useRef(null)\r\n    return (\r\n        <Styled {...rest} w={width}>\r\n            <h2 ref={ref}>{children}</h2>\r\n            <div className=\"line\"></div>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Title;","import React, {useState} from 'react';\r\nimport {Row, Col} from \"react-grid-system\";\r\nimport Search from \"../../../components/search\";\r\nimport Panel from \"../../../components/panel\";\r\nimport Section from \"../../../components/section\";\r\nimport Title from \"../../../components/ui/title\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {get, isEqual} from \"lodash\";\r\nimport {useGetAllQuery, usePostQuery} from \"../../../hooks/api\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\nimport Form from \"../../../containers/form/form\";\r\nimport {OverlayLoader} from \"../../../components/loader\";\r\nimport Button from \"../../../components/ui/button\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst AgentsCreateContainer = ({id = null, agent = {}, ...rest}) => {\r\n    const navigate = useNavigate();\r\n\r\n    const [personType,setPersonType] = useState(null)\r\n    const setPersonTypeForSelect = (val,name) => {\r\n        if(isEqual(name,'typeofpersons')){\r\n            setPersonType(val)\r\n        }\r\n    }\r\n    let {data: branches} = useGetAllQuery({key: KEYS.branches, url: URLS.branches})\r\n    branches = getSelectOptionsListFromData(get(branches, `data.data`, []), '_id', 'branchname')\r\n\r\n    let {data: regions} = useGetAllQuery({key: KEYS.regions, url: URLS.regions})\r\n    regions = getSelectOptionsListFromData(get(regions, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: agentTypes} = useGetAllQuery({key: KEYS.typeofagent, url: URLS.typeofagent})\r\n    agentTypes = getSelectOptionsListFromData(get(agentTypes, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: persons} = useGetAllQuery({key: KEYS.typeofpersons, url: URLS.typeofpersons})\r\n    persons = getSelectOptionsListFromData(get(persons, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: accountstatus} = useGetAllQuery({key: KEYS.accountstatus, url: URLS.accountstatus})\r\n    accountstatus = getSelectOptionsListFromData(get(accountstatus, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: accountrole} = useGetAllQuery({key: KEYS.accountroles, url: URLS.accountroles})\r\n    accountrole = getSelectOptionsListFromData(get(accountrole, `data.data`, []), '_id', 'name')\r\n    const {mutate: createRequest, isLoading} = usePostQuery({listKeyId: KEYS.agents})\r\n    const create = ({data}) => {\r\n        createRequest({url:URLS.agents, attributes: data}, {\r\n            onSuccess: () => {\r\n                navigate('/agents/insurance-agents')\r\n            },\r\n            onError: () => {\r\n\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            {isLoading && <OverlayLoader />}\r\n            <Panel>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Search/>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Panel>\r\n            <Section>\r\n                <Row className={'mb-25'}>\r\n                    <Col xs={12}>\r\n                        <Title>Agent create</Title>\r\n                    </Col>\r\n                </Row>\r\n                <Form getValueFromField={(val,name)=>setPersonTypeForSelect(val,name)} footer={<Button>Save</Button>} formRequest={(values)=>create(values)}>\r\n                    <Row>\r\n                        <Col xs={4}>\r\n                            <Field name={'branch'} type={'select'} label={'Branch'} options={branches}\r\n                                   defaultValue={id ? get(agent, 'branch._id') : null}\r\n                                   params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'inn'} type={'input-mask'} label={'INN'}\r\n                                   property={{mask: '999999999', maskChar: '_'}}\r\n                                   defaultValue={id ? get(agent, 'inn') : null}\r\n                                   params={{required: true, pattern: /^[0-9]*$/}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'regionId'} type={'select'} label={'Region'} options={regions}\r\n                                   defaultValue={id ? get(agent, 'regionId._id') : null} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'typeofagent'} type={'select'} label={'Agent type'} options={agentTypes}\r\n                                   defaultValue={id ? get(agent, 'typeofagent._id') : null} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'typeofpersons'} type={'select'} label={'Person type'} options={persons}\r\n                                   defaultValue={id ? get(agent, 'typeofpersons._id') : null}\r\n                                   params={{required: true}}/>\r\n                        </Col>\r\n                        {isEqual(personType, '6292025f8982798b6996bc34') && <><Col xs={4}>\r\n                            <Field name={'forindividualsagent.fullName'} type={'input'} label={'Fullname'}\r\n                                   defaultValue={id ? get(agent, 'forindividualsagent.fullName') : null}\r\n                                   params={{required: true}}/>\r\n                        </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'forindividualsagent.passportSeries'} type={'input-mask'}\r\n                                       label={'Passport seria'}\r\n                                       property={{mask: 'AA9999999', maskChar: '_'}}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.passportSeries') : null}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n\r\n                                <Field name={'forindividualsagent.pin'} type={'input-mask'} label={'PINFL'}\r\n                                       property={{mask: '99999999999999', maskChar: '_'}}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.pin') : null}\r\n                                       params={{required: true, pattern: /^[0-9]*$/}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'forindividualsagent.passportissuancedate'} type={'datepicker'}\r\n                                       label={'passportissuancedate'}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.passportissuancedate') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'forindividualsagent.passportissuedby'} type={'input'}\r\n                                       label={'passportissuedby'}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.passportissuedby') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'forindividualsagent.dateofbirth'} type={'datepicker'} label={'dateofbirth'}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.dateofbirth') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'forindividualsagent.numberofcard'} type={'input'} label={'numberofcard'}\r\n                                       defaultValue={id ? get(agent, 'forindividualsagent.numberofcard') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                        </>\r\n                        }\r\n                        {isEqual(personType, '629202448982798b6996bc32') &&\r\n                        <>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.fullname'} type={'input'} label={'fullname'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.fullname') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.nameoforganization'} type={'input'}\r\n                                       label={'nameoforganization'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.nameoforganization') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.oked'} type={'input'} label={'oked'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.oked') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.mfo'} type={'input'} label={'mfo'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.mfo') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.bank'} type={'input'} label={'bank'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.bank') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field name={'corporateentitiesagent.scheduledaccount'} type={'input'}\r\n                                       label={'scheduledaccount'}\r\n                                       defaultValue={id ? get(agent, 'corporateentitiesagent.scheduledaccount') : null}\r\n                                       params={{required: true}}/>\r\n                            </Col>\r\n                        </>\r\n                        }\r\n                        <Col xs={4}>\r\n                            <Field name={'address'} type={'input'} label={'address'}\r\n                                   defaultValue={id ? get(agent, 'address') : null} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'telephonenumber'} type={'input'} label={'telephonenumber'}\r\n                                   defaultValue={id ? get(agent, 'telephonenumber') : null} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                label={'isUsedourpanel'}\r\n                                type={'switch'}\r\n                                name={'isUsedourpanel'}\r\n                                defaultValue={id ? get(agent, 'isUsedourpanel', false) : null}\r\n                                params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field\r\n                                label={'isUserRestAPI'}\r\n                                type={'switch'}\r\n                                name={'isUserRestAPI'}\r\n                                defaultValue={id ? get(agent, 'isUserRestAPI', false) : null}\r\n                                params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'email'} type={'input'} label={'email'}\r\n                                   defaultValue={id ? get(agent, 'email') : null} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'password'} type={'input'} label={'password'}\r\n                                   defaultValue={id ? get(agent, 'password') : null} property={{type:\"password\"}} params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'accountstatus'} type={'select'} label={'Account status'}\r\n                                   options={accountstatus}\r\n                                   defaultValue={id ? get(agent, 'accountstatus._id') : null}\r\n                                   params={{required: true}}/>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Field name={'accountrole'} type={'select'} label={'Account role'} options={accountrole}\r\n                                   defaultValue={id ? get(agent, 'accountrole._id') : null} params={{required: true}}/>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AgentsCreateContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport AgentsCreateContainer from \"../containers/AgentsCreateContainer\";\r\n\r\n\r\nconst Styled = styled.div`\r\n\r\n`;\r\nconst AgentsCreatePage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <AgentsCreateContainer/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default AgentsCreatePage;","import {includes} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => ({ value: item[value], label: item[label] })) || [];\r\n}\r\n\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData\r\n}"],"names":["Styled","styled","children","rest","fluid","useForm","register","handleSubmit","t","useTranslation","onSubmit","data","console","log","placeholder","type","className","w","sm","css","useState","width","setWidth","useEffect","ref","current","clientWidth","useRef","id","agent","navigate","useNavigate","personType","setPersonType","branches","useGetAllQuery","key","KEYS","url","URLS","getSelectOptionsListFromData","get","regions","agentTypes","persons","accountstatus","accountrole","usePostQuery","listKeyId","createRequest","mutate","isLoading","xs","getValueFromField","val","name","isEqual","setPersonTypeForSelect","footer","formRequest","values","attributes","onSuccess","onError","create","label","options","defaultValue","params","required","property","mask","maskChar","pattern","value","map","item"],"sourceRoot":""}