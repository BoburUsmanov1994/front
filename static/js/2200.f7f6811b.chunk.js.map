{"version":3,"file":"static/js/2200.f7f6811b.chunk.js","mappings":"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","sources":["modules/products/containers/ProductViewContainer.jsx","modules/products/containers/ProductUpdateContainer.jsx","modules/products/pages/ProductUpdatePage.jsx"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Panel from \"../../../components/panel\";\r\nimport Search from \"../../../components/search\";\r\nimport Title from \"../../../components/ui/title\";\r\nimport Section from \"../../../components/section\";\r\nimport {useDeleteQuery, useGetOneQuery} from \"../../../hooks/api\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport {ContentLoader, OverlayLoader} from \"../../../components/loader\";\r\nimport Table from \"../../../components/table\";\r\nimport {Download, Edit, Trash2} from \"react-feather\";\r\nimport Flex from \"../../../components/flex\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst ProductViewContainer = ({id, ...rest}) => {\r\n    const {t} = useTranslation();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    let {data,isLoading,isError} = useGetOneQuery({id,key: KEYS.products, url: URLS.products})\r\n\r\n    const {mutate: deleteRequest, isLoading: deleteLoading} = useDeleteQuery({listKeyId: KEYS.products})\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: t('Продукты'),\r\n            path: '/products',\r\n        },\r\n        {\r\n            id: 2,\r\n            title:  get(data,'data.data.productname'),\r\n            path: '#',\r\n        }\r\n    ], [data])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [get(data,'data.data')])\r\n\r\n    const remove = (val) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'error',\r\n            backdrop: 'rgba(0,0,0,0.9)',\r\n            background: 'none',\r\n            title: 'Are you sure?',\r\n            showConfirmButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#d33',\r\n            cancelButtonColor: '#13D6D1',\r\n            confirmButtonText: 'Delete',\r\n            customClass: {\r\n                title: 'title-color',\r\n            },\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                deleteRequest({url: `${URLS.products}/${val}`})\r\n                navigate('/products/all')\r\n            }\r\n        });\r\n    }\r\n\r\n    const product = get(data,'data.data',{})\r\n\r\n    if(isLoading){\r\n        return <OverlayLoader />\r\n    }\r\n    return (\r\n        <>\r\n            {deleteLoading && <ContentLoader />}\r\n            <Panel>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Search/>\r\n                    </Col>\r\n                </Row>\r\n            </Panel>\r\n            <Section>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Flex className={'w-100'}>\r\n                            <Title>{get(product,'productname',t('Product'))}</Title>\r\n                            <Edit onClick={()=>navigate(`/products/update/${id}`)} className={'cursor-pointer mr-10 ml-15'} size={28} color={'#13D6D1'}/>\r\n                            <Trash2 onClick={() => remove(id)}\r\n                                    className={'cursor-pointer '} size={28} color={'#dc2626'}/>\r\n                        </Flex>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={6}>\r\n\r\n                        <Table thead={['1', '2']}>\r\n                            <tr>\r\n                                <td>Категория</td>\r\n                                <td><strong>{get(product,'groupofproductsId.name','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{t(\"Под категория\")}</td>\r\n                                <td><strong>{get(product,'subgroupofproductsId.name','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{t(\"codeproduct\")}</td>\r\n                                <td><strong>{get(product,'codeproduct','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Работа по версии продукта (Версия продукта)</td>\r\n                                <td><strong>{get(product,'versionproduct','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Тип страховщика</td>\r\n                                <td><strong>{get(product,'typeofinsurerId.name',\"-\")}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Наименование продукта</td>\r\n                                <td><strong>{get(product,'productname','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Статус договора</td>\r\n                                <td><strong>{get(product,'statusofproducts.name','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Требует разрешения</td>\r\n                                <td><strong>{get(product,'isrequirepermission',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Тип полиса</td>\r\n                                <td><strong>{get(product,'typeofpolice',[]).map(({name})=>name).join(\" , \")}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Разрешить несколько агентов</td>\r\n                                <td><strong>{get(product,'Isagreement',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет фиксированный превентивных мероприятий</td>\r\n                                <td><strong>{get(product,'Isfixedpreventivemeasures',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Разрешить иностранную валюту</td>\r\n                                <td><strong>{get(product,'Isforeigncurrency',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Разрешение изменение франшизы</td>\r\n                                <td><strong>{get(product,'Isfranchisechange',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                        </Table>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Table thead={['1', '2']}>\r\n                            <tr>\r\n                                <td>Форма анкеты</td>\r\n\r\n                                <td><a href={get(product,'applicationformId','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Договор</td>\r\n                                <td><a href={get(product,'contractform','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Приложения</td>\r\n                                <td><a href={get(product,'additionaldocuments','#')} target={'_blank'} download><Download color={'#13D6D1'} /></a></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Формат полиса</td>\r\n                                <td><strong>{get(product,'policyformatId.name','-')}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет фиксированного страхователя</td>\r\n                                <td><strong>{get(product,'Isfixedpolicyholder',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет выгодоприобретеля</td>\r\n                                <td><strong>{get(product,'Isbeneficiary',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет фиксированного выгодоприобретеля</td>\r\n                                <td><strong>{get(product,'Isfixedbeneficiary',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет фиксированную страховую сумму</td>\r\n                                <td><strong>{get(product,'Isfixedfee',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Разрешить полис без оплаты</td>\r\n                                <td><strong>{get(product,'Ispolicywithoutpayment',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Тип оплаты</td>\r\n                                <td><strong>{get(product,'typeofpayment',[]).map(({name})=>name).join(\" , \")}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет фиксированную комиссию</td>\r\n                                <td><strong>{get(product,'Isfixedfee',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет диапазон ставок</td>\r\n                                <td><strong>{get(product,'Isbettingrange',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Имеет франшизу</td>\r\n                                <td><strong>{get(product,'Isfranchisechange',false) ? 'Да' : 'Нет'}</strong></td>\r\n                            </tr>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductViewContainer;","import React, {useEffect, useMemo} from 'react';\r\nimport {useSettingsStore, useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport StepWizard from \"react-step-wizard\";\r\nimport Panel from \"../../../components/panel\";\r\nimport Search from \"../../../components/search\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Section from \"../../../components/section\";\r\nimport Title from \"../../../components/ui/title\";\r\nimport StepOne from \"../components/create/StepOne\";\r\nimport StepTwo from \"../components/create/StepTwo\";\r\nimport StepThree from \"../components/create/StepThree\";\r\nimport StepFour from \"../components/create/StepFour\";\r\nimport StepFive from \"../components/create/StepFive\";\r\nimport StepSix from \"../components/create/StepSix\";\r\nimport {useGetAllQuery, useGetOneQuery} from \"../../../hooks/api\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport {OverlayLoader} from \"../../../components/loader\";\r\n\r\n\r\nconst ProductUpdateContainer = ({id, ...rest}) => {\r\n\r\n    let {data, isLoading, isError} = useGetOneQuery({id, key: KEYS.products, url: URLS.products})\r\n    const setProduct = useSettingsStore(state => get(state, 'setProduct', () => {\r\n    }))\r\n    const resetProduct = useSettingsStore(state => get(state, 'resetProduct', () => {\r\n    }))\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Продукты',\r\n            path: '/products',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: get(data, 'data.data.productname'),\r\n            path: '#',\r\n        }\r\n    ], [data])\r\n\r\n    useEffect(() => {\r\n\r\n        resetProduct()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n        if (data) {\r\n            const {\r\n                groupofproductsId, subgroupofproductsId, typeofinsurerId, typeofsectorId,\r\n                fixedpolicyholder, fixedbeneficiary, policyformatId, typeofclaimsettlement,\r\n                typeofpayment, typeofpolice, agentlist, typeofrefund,\r\n                ...rest\r\n            } = get(data, 'data.data', {})\r\n\r\n            setProduct({\r\n                ...rest,\r\n                groupofproductsId: get(groupofproductsId, '_id'),\r\n                subgroupofproductsId: get(subgroupofproductsId, '_id'),\r\n                typeofinsurerId: get(typeofinsurerId, '_id'),\r\n                typeofsectorId: get(typeofsectorId, '_id'),\r\n                fixedpolicyholder: get(fixedpolicyholder, '_id'),\r\n                fixedbeneficiary: fixedbeneficiary.map(({_id}) => _id),\r\n                policyformatId: get(policyformatId, '_id'),\r\n                typeofclaimsettlement: get(typeofclaimsettlement, '_id'),\r\n                typeofpayment: typeofpayment.map(({_id}) => _id),\r\n                typeofpolice: typeofpolice.map(({_id}) => _id),\r\n                agentlist: agentlist.map(({_id}) => _id),\r\n                typeofrefund: get(typeofrefund, '_id')\r\n            })\r\n        }\r\n\r\n    }, [get(data, 'data.data')])\r\n\r\n    const product = useSettingsStore(state => get(state, 'product', {}))\r\n    console.log('Product', product)\r\n\r\n    if (isLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Panel>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Search/>\r\n                    </Col>\r\n                </Row>\r\n            </Panel>\r\n            <Section>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Title>Изменить продукт ({get(data, 'data.data.productname')})</Title>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <StepWizard isHashEnabled={true}>\r\n                            <StepOne id={id} hashKey={\"one\"}/>\r\n                            <StepTwo hashKey={\"two\"}/>\r\n                            <StepThree hashKey={\"three\"}/>\r\n                            <StepFour id={id} hashKey={\"four\"}/>\r\n                            <StepFive id={id} hashKey={\"five\"}/>\r\n                            <StepSix hashKey={\"six\"}/>\r\n                        </StepWizard>\r\n                    </Col>\r\n                </Row>\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductUpdateContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport ProductViewContainer from \"../containers/ProductViewContainer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport ProductupdateContainer from \"../containers/ProductUpdateContainer\";\r\n\r\nconst Styled = styled.div`\r\n\r\n`;\r\nconst ProductUpdatePage = ({...rest}) => {\r\n    const {id = null} = useParams();\r\n    return (\r\n        <Styled {...rest}>\r\n            <ProductupdateContainer id={id}/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ProductUpdatePage;"],"names":["id","t","useTranslation","navigate","useNavigate","useGetOneQuery","key","KEYS","url","URLS","data","isLoading","isError","useDeleteQuery","listKeyId","deleteRequest","mutate","deleteLoading","setBreadcrumbs","useStore","state","get","breadcrumbs","useMemo","title","path","useEffect","product","xs","className","onClick","size","color","val","Swal","position","icon","backdrop","background","showConfirmButton","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","customClass","then","result","isConfirmed","thead","map","name","join","href","target","download","setProduct","useSettingsStore","resetProduct","groupofproductsId","subgroupofproductsId","typeofinsurerId","typeofsectorId","fixedpolicyholder","fixedbeneficiary","policyformatId","typeofclaimsettlement","typeofpayment","typeofpolice","agentlist","typeofrefund","rest","_id","console","log","isHashEnabled","StepOne","hashKey","StepTwo","StepThree","StepFour","StepFive","StepSix","Styled","styled","useParams"],"sourceRoot":""}