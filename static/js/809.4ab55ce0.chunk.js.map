{"version":3,"file":"static/js/809.4ab55ce0.chunk.js","mappings":"+RA8DA,EApDiC,SAAC,GAAc,oBAAC,IACjCA,GAASC,EAAAA,EAAAA,IAAe,CAACC,IAAIC,EAAAA,EAAAA,iBAAsBC,IAAIC,EAAAA,EAAAA,mBAA5DC,KACDC,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAAIT,EAAD,YAAmB,IAAI,MAAM,QAC5EU,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIH,EAAAA,EAAAA,KAAIG,EAAO,kBAAkB,kBAEhEC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,qEACPC,KAAM,aAEV,CACIF,GAAI,EACJC,MAAO,gHACPC,KAAM,iCAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNR,EAAeG,KAChB,IAMH,OACI,+BACI,SAAC,IAAD,CACIM,UAPM,SAAC,GAAD,IAAEb,EAAF,EAAEA,KAAF,IAAOc,MAAAA,OAAP,MAAe,KAAf,SAA0B,iCACxC,SAAC,IAAD,CAAQC,KAAM,OAAQC,KAAM,QAASC,MAAO,iKAAgCC,aAAcJ,GAAQX,EAAAA,EAAAA,KAAIH,EAAK,QAAQ,KAAMmB,OAAQ,CAACC,UAAU,MAC5I,SAAC,IAAD,CAAQL,KAAM,UAAWC,KAAM,SAAUC,MAAO,qGAAsBI,QAASpB,EAAciB,aAAcJ,GAAQX,EAAAA,EAAAA,KAAIH,EAAK,WAAW,KAAMmB,OAAQ,CAACC,UAAU,SAMxJE,gBAAiB,CACb,CACIb,GAAI,EACJb,IAAK,OACLc,MAAO,kKAEX,CACID,GAAI,EACJb,IAAK,UACLc,MAAO,sGAGfa,MAAO1B,EAAAA,EAAAA,oBACPC,IAAKC,EAAAA,EAAAA,oBACLW,MAAO,gHACPc,gBAAiB,YCnD3BC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EAR6B,SAAC,GAAe,IAAXC,EAAU,oBACxC,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD,S,iECaNzB,EAA+B,WAA+C,IAA9CF,EAA6C,uDAAtC,GAAI4B,EAAkC,uDAA1B,KAAMX,EAAoB,uDAAZ,QACnE,OAAOjB,EAAK6B,KAAI,SAAAC,GAAI,MAAK,CAAEF,MAAOE,EAAKF,GAAQX,MAAOa,EAAKb,QAAc","sources":["modules/products/containers/ProductSubGroupContainer.jsx","modules/products/pages/ProductSubGroupsPage.jsx","utils/index.js"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\n\r\nconst ProductSubGroupContainer = ({...rest}) => {\r\n    const {data:types} = useGetAllQuery({key:KEYS.groupsofproducts,url:URLS.groupsofproducts})\r\n    const typesOptions = getSelectOptionsListFromData(get(types,`data.data`,[]),'_id','name')\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Справочники',\r\n            path: '/handbook',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Подгруппы продуктов',\r\n            path: '/handbook/product-subgroup',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data,rowId = null}) =>  <>\r\n        <Field  name={'name'} type={'input'} label={'Название подгруппы продуктов'} defaultValue={rowId ? get(data,'name'):null} params={{required: true}} />\r\n        <Field  name={'groupId'} type={'select'} label={'Название продукта '} options={typesOptions} defaultValue={rowId ? get(data,'groupId'):null} params={{required: true}} />\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 2,\r\n                        key: 'name',\r\n                        title: 'Название подгруппы продуктов'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'groupId',\r\n                        title: 'Название продукта'\r\n                    },\r\n                ]}\r\n                keyId={KEYS.subgroupsofproducts}\r\n                url={URLS.subgroupsofproducts}\r\n                title={'Подгруппы продуктов'}\r\n                responseDataKey={'data'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductSubGroupContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport ProductSubGroupContainer from \"../containers/ProductSubGroupContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst ProductSubGroupsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <ProductSubGroupContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ProductSubGroupsPage;","import {includes} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => ({ value: item[value], label: item[label] })) || [];\r\n}\r\n\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData\r\n}"],"names":["types","useGetAllQuery","key","KEYS","url","URLS","data","typesOptions","getSelectOptionsListFromData","get","setBreadcrumbs","useStore","state","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","rowId","name","type","label","defaultValue","params","required","options","tableHeaderData","keyId","responseDataKey","Styled","styled","rest","value","map","item"],"sourceRoot":""}