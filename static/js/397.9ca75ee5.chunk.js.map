{"version":3,"file":"static/js/397.9ca75ee5.chunk.js","mappings":"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","sources":["modules/agents/containers/AgentsContainer.jsx","modules/agents/pages/AgentsPage.jsx","utils/index.js"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport {useStore} from \"../../../store\";\r\nimport {get, isEqual} from \"lodash\";\r\nimport GridView from \"../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../constants/key\";\r\nimport {URLS} from \"../../../constants/url\";\r\nimport Field from \"../../../containers/form/field\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getSelectOptionsListFromData} from \"../../../utils\";\r\nimport {Col, Row} from \"react-grid-system\";\r\n\r\nconst AgentsContainer = ({...rest}) => {\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n\r\n    let {data: regions} = useGetAllQuery({key: KEYS.regions, url: URLS.regions})\r\n    regions = getSelectOptionsListFromData(get(regions, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: agentTypes} = useGetAllQuery({key: KEYS.typeofagent, url: URLS.typeofagent})\r\n    agentTypes = getSelectOptionsListFromData(get(agentTypes, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: persons} = useGetAllQuery({key: KEYS.typeofpersons, url: URLS.typeofpersons})\r\n    persons = getSelectOptionsListFromData(get(persons, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: accountstatus} = useGetAllQuery({key: KEYS.accountstatus, url: URLS.accountstatus})\r\n    accountstatus = getSelectOptionsListFromData(get(accountstatus, `data.data`, []), '_id', 'name')\r\n\r\n    let {data: accountrole} = useGetAllQuery({key: KEYS.accountroles, url: URLS.accountroles})\r\n    accountrole = getSelectOptionsListFromData(get(accountrole, `data.data`, []), '_id', 'name')\r\n\r\n\r\n    console.log('persons', persons)\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Агенты',\r\n            path: '/agents',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Страховые агенты',\r\n            path: '/agents/insurance-agents',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data, rowId = null, personType = null}) => <>\r\n        <Row>\r\n            <Col xs={6}>\r\n                <Field name={'inn'} type={'input-mask'} label={'INN'} property={{mask: '999999999', maskChar: '_'}}\r\n                       defaultValue={rowId ? get(data, 'inn') : null} params={{required: true, pattern: /^[0-9]*$/}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'regionId'} type={'select'} label={'Region'} options={regions}\r\n                       defaultValue={rowId ? get(data, 'regionId._id') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'typeofagent'} type={'select'} label={'Agent type'} options={agentTypes}\r\n                       defaultValue={rowId ? get(data, 'typeofagent._id') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'typeofpersons'} type={'select'} label={'Person type'} options={persons}\r\n                       defaultValue={rowId ? get(data, 'typeofpersons._id') : null} params={{required: true}}/>\r\n            </Col>\r\n            {isEqual(personType, '6292025f8982798b6996bc34') && <><Col xs={6}>\r\n                <Field name={'forindividualsdata.fullName'} type={'input'} label={'Fullname'}\r\n                       defaultValue={rowId ? get(data, 'forindividualsdata.fullName') : null}\r\n                       params={{required: true}}/>\r\n            </Col>\r\n                <Col xs={6}>\r\n                    <Field name={'forindividualsdata.passportSeries'} type={'input-mask'} label={'Passport seria'}\r\n                           property={{mask: 'AA9999999', maskChar: '_'}}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.passportSeries') : null}/>\r\n                </Col>\r\n                <Col xs={6}>\r\n\r\n                    <Field name={'forindividualsdata.pin'} type={'input-mask'} label={'PINFL'}\r\n                           property={{mask: '99999999999999', maskChar: '_'}}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.pin') : null}\r\n                           params={{required: true, pattern: /^[0-9]*$/}}/>\r\n                </Col>\r\n                <Col xs={6}>\r\n                    <Field name={'forindividualsdata.passportissuancedate'} type={'input'}\r\n                           label={'passportissuancedate'}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.passportissuancedate') : null}\r\n                           params={{required: true}}/>\r\n                </Col>\r\n                <Col xs={6}>\r\n                    <Field name={'forindividualsdata.passportissuedby'} type={'input'} label={'passportissuedby'}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.passportissuedby') : null}\r\n                           params={{required: true}}/>\r\n                </Col>\r\n                <Col xs={6}>\r\n                    <Field name={'forindividualsdata.dateofbirth'} type={'input'} label={'dateofbirth'}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.dateofbirth') : null}\r\n                           params={{required: true}}/>\r\n                </Col>\r\n                <Col xs={6}>\r\n                    <Field name={'forindividualsdata.numberofcard'} type={'input'} label={'numberofcard'}\r\n                           defaultValue={rowId ? get(data, 'forindividualsdata.numberofcard') : null}\r\n                           params={{required: true}}/>\r\n                </Col>\r\n            </>\r\n            }\r\n            {isEqual(personType, '629202448982798b6996bc32') &&\r\n                <>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.fullname'} type={'input'} label={'fullname'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.fullname') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.nameoforganization'} type={'input'}\r\n                               label={'nameoforganization'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.nameoforganization') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.oked'} type={'input'} label={'oked'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.oked') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.mfo'} type={'input'} label={'mfo'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.mfo') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.bank'} type={'input'} label={'bank'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.bank') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <Field name={'corporateentitiesdata.scheduledaccount'} type={'input'} label={'scheduledaccount'}\r\n                               defaultValue={rowId ? get(data, 'corporateentitiesdata.scheduledaccount') : null}\r\n                               params={{required: true}}/>\r\n                    </Col>\r\n                </>\r\n            }\r\n            <Col xs={6}>\r\n                <Field name={'address'} type={'input'} label={'address'}\r\n                       defaultValue={rowId ? get(data, 'address') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'telephonenumber'} type={'input'} label={'telephonenumber'}\r\n                       defaultValue={rowId ? get(data, 'telephonenumber') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field\r\n                    label={'isUsedourpanel'}\r\n                    type={'switch'}\r\n                    name={'isUsedourpanel'}\r\n                    defaultValue={rowId ? get(data, 'isUsedourpanel', false) : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field\r\n                    label={'isUserRestAPI'}\r\n                    type={'switch'}\r\n                    name={'isUserRestAPI'}\r\n                    defaultValue={rowId ? get(data, 'isUserRestAPI', false) : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'email'} type={'input'} label={'email'}\r\n                       defaultValue={rowId ? get(data, 'email') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'password'} type={'input'} label={'password'}\r\n                       defaultValue={rowId ? get(data, 'password') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'accountstatus'} type={'select'} label={'Account status'} options={accountstatus}\r\n                       defaultValue={rowId ? get(data, 'accountstatus._id') : null} params={{required: true}}/>\r\n            </Col>\r\n            <Col xs={6}>\r\n                <Field name={'accountrole'} type={'select'} label={'Account role'} options={accountrole}\r\n                       defaultValue={rowId ? get(data, 'accountrole._id') : null} params={{required: true}}/>\r\n            </Col>\r\n        </Row>\r\n\r\n    </>\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 1,\r\n                        key: 'inn',\r\n                        title: 'INN'\r\n                    },\r\n                    {\r\n                        id: 2,\r\n                        key: 'regionId.name',\r\n                        title: 'Region'\r\n                    },\r\n                    {\r\n                        id: 3,\r\n                        key: 'typeofagent.name',\r\n                        title: 'Agent type'\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'typeofpersons.name',\r\n                        title: 'Person type'\r\n                    },\r\n                    {\r\n                        id: 5,\r\n                        key: 'address',\r\n                        title: 'Address'\r\n                    },\r\n                    {\r\n                        id: 6,\r\n                        key: 'email',\r\n                        title: 'Email'\r\n                    },\r\n                    {\r\n                        id: 7,\r\n                        key: 'accountrole.name',\r\n                        title: 'Role'\r\n                    },\r\n                    {\r\n                        id: 8,\r\n                        key: 'accountstatus.name',\r\n                        title: 'Status'\r\n                    },\r\n                ]}\r\n                keyId={KEYS.agents}\r\n                url={URLS.agents}\r\n                title={'Страховые агенты'}\r\n                responseDataKey={'data'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AgentsContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport AgentsContainer from \"../containers/AgentsContainer\";\r\n\r\nconst Styled = styled.div`\r\n    .rodal-dialog{\r\n      width: 800px !important;\r\n    }\r\n`;\r\nconst AgentsPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <AgentsContainer />\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default AgentsPage;","import {includes} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => ({ value: item[value], label: item[label] })) || [];\r\n}\r\n\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData\r\n}"],"names":["setBreadcrumbs","useStore","state","get","regions","useGetAllQuery","key","KEYS","url","URLS","data","getSelectOptionsListFromData","agentTypes","persons","accountstatus","accountrole","console","log","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","rowId","personType","xs","name","type","label","property","mask","maskChar","defaultValue","params","required","pattern","options","isEqual","tableHeaderData","keyId","responseDataKey","Styled","styled","rest","value","map","item"],"sourceRoot":""}